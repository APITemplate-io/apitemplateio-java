/*
 * APITemplate.io API Reference
 * # Introduction   Welcome to the [APITemplate.io](https://apitemplate.io) API v2!  APITemplate.io provides PDF generation services including [Template-based PDF generation](https://apitemplate.io/pdf-generation-api/), [HTML to PDF](https://apitemplate.io/html-to-pdf-api/), and [URL to PDF conversions](https://apitemplate.io/create-pdf-from-url/), as well as an [image generation API](https://apitemplate.io/image-generation-api/).  This page contains the documentation on how to use APITemplate.io through API calls. With the APITemplate.io API, you can create PDF documents and images, as well as manage your templates.  Our API is built on RESTful HTTP, so you can utilize any HTTP/REST library of your choice in your preferred programming language to interact with APITemplate.io's API.  **Steps to produce PDFs/Images** 1. Design your template(s) using our intuitive drag-and-drop template editor or the HTML editor and save it. 2. Integrate your workflow, either with platforms like Zapier, Make.com/Integromat, Bubble.io, or any programming languages that support REST API, to send us the JSON data along with the template ID/URL/or HTML content. 3. Our REST API will then return a download URL for the images (in PNG and JPEG formats) or PDFs.  # Authentication Upon signing up for an account, an API key will be generated for you. If needed, you can reset this API key via the web console (under the \"API Integration\" section).  To integrate with our services, you need to authenticate with the APITemplate.io API. Provide your secret key in the request header using the X-API-KEY field.   # Content Type and CORS  **Request Content-Type** The Content-Type for POST and GET requests is set to application/json.  **Cross-Origin Resource Sharing** This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/). And that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.    # Regional API endpoint(s) A regional API endpoint is intended for customers in the same region. The data for the request and generated PDFs/images are processed and stored within the region.  The regions are:  | Region               | Endpoint                            | Max Timeout (Seconds) | Max Payload Size(MB)** | |----------------------|-------------------------------------|-----------------------|-------------------------| | Default (Singapore)  | https://rest.apitemplate.io         | 100                   | 1                       | | Europe (Frankfurt)   | https://rest-de.apitemplate.io      | 100                   | 1                       | | US East (N. Virginia)| https://rest-us.apitemplate.io      | 100                   | 1                       | | Australia (Sydney)   | https://rest-au.apitemplate.io      | 30                    | 6                       |   Alternative Regions: | Region               | Endpoint                            | Max Timeout (Seconds) | Max Payload Size(MB)** | |----------------------|-------------------------------------|-----------------------|-------------------------| | Default (Singapore)  | https://rest-alt.apitemplate.io     | 30                    | 6                       | | Europe (Frankfurt)   | https://rest-alt-de.apitemplate.io  | 30                    | 6                       | | US East (N. Virginia)| https://rest-alt-us.apitemplate.io  | 30                    | 6                       |  ** Note: - Payload size applies to request and response - If \"export_type\" is set to `json` which output file that on AWS S3 doesn't have the limitation - If the \"export_type\" is set to `file` which returns binary data of the generated PDF, the file size of the generated PDF is limited to either 6MB or 1MB based on the region    Other regions are available on request, contact us at hello@apitemplate.io for more information  # Rate limiting Our API endpoints use IP-based rate limiting to ensure fair usage and prevent abuse. Users are allowed to make up to **100 requests per 10 seconds**. This rate limit is designed to accommodate a reasonable volume of requests while maintaining optimal performance for all users.  However, if you exceed this limit and make additional requests, you will receive a response with HTTP code 429. This status code indicates that you have reached the rate limit and need to wait before making further requests. 
 *
 * The version of the OpenAPI document: Version 2.0
 * Contact: hello@apitemplate.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error;
import org.openapitools.client.model.ResponseSuccess;
import org.openapitools.client.model.ResponseSuccessListTemplates;
import org.openapitools.client.model.ResponseSuccessTemplate;
import org.openapitools.client.model.UpdateTemplateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TemplateManagementApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TemplateManagementApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TemplateManagementApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getTemplate
     * @param templateId Your template id, it can be obtained in the web console(Manage Templates) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns status and template information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTemplateCall(String templateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/get-template";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (templateId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("template_id", templateId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTemplateValidateBeforeCall(String templateId, final ApiCallback _callback) throws ApiException {
        return getTemplateCall(templateId, _callback);

    }

    /**
     * Get PDF template
     * Retrieves information of the PDF template (**This is an experimental API, contact support to learn more**) 
     * @param templateId Your template id, it can be obtained in the web console(Manage Templates) (optional)
     * @return ResponseSuccessTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns status and template information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseSuccessTemplate getTemplate(String templateId) throws ApiException {
        ApiResponse<ResponseSuccessTemplate> localVarResp = getTemplateWithHttpInfo(templateId);
        return localVarResp.getData();
    }

    /**
     * Get PDF template
     * Retrieves information of the PDF template (**This is an experimental API, contact support to learn more**) 
     * @param templateId Your template id, it can be obtained in the web console(Manage Templates) (optional)
     * @return ApiResponse&lt;ResponseSuccessTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns status and template information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseSuccessTemplate> getTemplateWithHttpInfo(String templateId) throws ApiException {
        okhttp3.Call localVarCall = getTemplateValidateBeforeCall(templateId, null);
        Type localVarReturnType = new TypeToken<ResponseSuccessTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get PDF template (asynchronously)
     * Retrieves information of the PDF template (**This is an experimental API, contact support to learn more**) 
     * @param templateId Your template id, it can be obtained in the web console(Manage Templates) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns status and template information </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTemplateAsync(String templateId, final ApiCallback<ResponseSuccessTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTemplateValidateBeforeCall(templateId, _callback);
        Type localVarReturnType = new TypeToken<ResponseSuccessTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTemplates
     * @param limit Retrieve only the number of records specified. Default to 300 (optional)
     * @param offset Offset is used to skip the number of records from the results. Default to 0 (optional)
     * @param format To filter the templates by either &#39;PDF&#39; or &#39;JPEG&#39; (optional)
     * @param templateId To filter the templates by template id (optional)
     * @param groupName To filter the templates by the group name (optional)
     * @param withLayerInfo Return along with layer information for image templates, 0&#x3D;false , 1&#x3D;true. Default to &#39;0&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns status and output file </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTemplatesCall(String limit, String offset, String format, String templateId, String groupName, String withLayerInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/list-templates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (templateId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("template_id", templateId));
        }

        if (groupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_name", groupName));
        }

        if (withLayerInfo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("with_layer_info", withLayerInfo));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTemplatesValidateBeforeCall(String limit, String offset, String format, String templateId, String groupName, String withLayerInfo, final ApiCallback _callback) throws ApiException {
        return listTemplatesCall(limit, offset, format, templateId, groupName, withLayerInfo, _callback);

    }

    /**
     * List Templates
     * Retrieves the information of templates 
     * @param limit Retrieve only the number of records specified. Default to 300 (optional)
     * @param offset Offset is used to skip the number of records from the results. Default to 0 (optional)
     * @param format To filter the templates by either &#39;PDF&#39; or &#39;JPEG&#39; (optional)
     * @param templateId To filter the templates by template id (optional)
     * @param groupName To filter the templates by the group name (optional)
     * @param withLayerInfo Return along with layer information for image templates, 0&#x3D;false , 1&#x3D;true. Default to &#39;0&#39; (optional)
     * @return ResponseSuccessListTemplates
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns status and output file </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseSuccessListTemplates listTemplates(String limit, String offset, String format, String templateId, String groupName, String withLayerInfo) throws ApiException {
        ApiResponse<ResponseSuccessListTemplates> localVarResp = listTemplatesWithHttpInfo(limit, offset, format, templateId, groupName, withLayerInfo);
        return localVarResp.getData();
    }

    /**
     * List Templates
     * Retrieves the information of templates 
     * @param limit Retrieve only the number of records specified. Default to 300 (optional)
     * @param offset Offset is used to skip the number of records from the results. Default to 0 (optional)
     * @param format To filter the templates by either &#39;PDF&#39; or &#39;JPEG&#39; (optional)
     * @param templateId To filter the templates by template id (optional)
     * @param groupName To filter the templates by the group name (optional)
     * @param withLayerInfo Return along with layer information for image templates, 0&#x3D;false , 1&#x3D;true. Default to &#39;0&#39; (optional)
     * @return ApiResponse&lt;ResponseSuccessListTemplates&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns status and output file </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseSuccessListTemplates> listTemplatesWithHttpInfo(String limit, String offset, String format, String templateId, String groupName, String withLayerInfo) throws ApiException {
        okhttp3.Call localVarCall = listTemplatesValidateBeforeCall(limit, offset, format, templateId, groupName, withLayerInfo, null);
        Type localVarReturnType = new TypeToken<ResponseSuccessListTemplates>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Templates (asynchronously)
     * Retrieves the information of templates 
     * @param limit Retrieve only the number of records specified. Default to 300 (optional)
     * @param offset Offset is used to skip the number of records from the results. Default to 0 (optional)
     * @param format To filter the templates by either &#39;PDF&#39; or &#39;JPEG&#39; (optional)
     * @param templateId To filter the templates by template id (optional)
     * @param groupName To filter the templates by the group name (optional)
     * @param withLayerInfo Return along with layer information for image templates, 0&#x3D;false , 1&#x3D;true. Default to &#39;0&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns status and output file </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTemplatesAsync(String limit, String offset, String format, String templateId, String groupName, String withLayerInfo, final ApiCallback<ResponseSuccessListTemplates> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTemplatesValidateBeforeCall(limit, offset, format, templateId, groupName, withLayerInfo, _callback);
        Type localVarReturnType = new TypeToken<ResponseSuccessListTemplates>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTemplate
     * @param updateTemplateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns status and output file </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTemplateCall(UpdateTemplateRequest updateTemplateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateTemplateRequest;

        // create path and map variables
        String localVarPath = "/v2/update-template";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTemplateValidateBeforeCall(UpdateTemplateRequest updateTemplateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateTemplateRequest' is set
        if (updateTemplateRequest == null) {
            throw new ApiException("Missing the required parameter 'updateTemplateRequest' when calling updateTemplate(Async)");
        }

        return updateTemplateCall(updateTemplateRequest, _callback);

    }

    /**
     * Update PDF Template
     * This endpoint updates PDF template (**This is an experimental API, contact support to learn more**)
     * @param updateTemplateRequest  (required)
     * @return ResponseSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns status and output file </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseSuccess updateTemplate(UpdateTemplateRequest updateTemplateRequest) throws ApiException {
        ApiResponse<ResponseSuccess> localVarResp = updateTemplateWithHttpInfo(updateTemplateRequest);
        return localVarResp.getData();
    }

    /**
     * Update PDF Template
     * This endpoint updates PDF template (**This is an experimental API, contact support to learn more**)
     * @param updateTemplateRequest  (required)
     * @return ApiResponse&lt;ResponseSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns status and output file </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseSuccess> updateTemplateWithHttpInfo(UpdateTemplateRequest updateTemplateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateTemplateValidateBeforeCall(updateTemplateRequest, null);
        Type localVarReturnType = new TypeToken<ResponseSuccess>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update PDF Template (asynchronously)
     * This endpoint updates PDF template (**This is an experimental API, contact support to learn more**)
     * @param updateTemplateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns status and output file </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTemplateAsync(UpdateTemplateRequest updateTemplateRequest, final ApiCallback<ResponseSuccess> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTemplateValidateBeforeCall(updateTemplateRequest, _callback);
        Type localVarReturnType = new TypeToken<ResponseSuccess>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
