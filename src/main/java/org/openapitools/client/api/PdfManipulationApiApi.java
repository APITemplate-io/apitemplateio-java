/*
 * APITemplate.io API Reference
 * # Introduction   Welcome to the [APITemplate.io](https://apitemplate.io) API v2!  APITemplate.io provides PDF generation services including [Template-based PDF generation](https://apitemplate.io/pdf-generation-api/), [HTML to PDF](https://apitemplate.io/html-to-pdf-api/), and [URL to PDF conversions](https://apitemplate.io/create-pdf-from-url/), as well as an [image generation API](https://apitemplate.io/image-generation-api/).  This page contains the documentation on how to use APITemplate.io through API calls. With the APITemplate.io API, you can create PDF documents and images, as well as manage your templates.  Our API is built on RESTful HTTP, so you can utilize any HTTP/REST library of your choice in your preferred programming language to interact with APITemplate.io's API.  **Steps to produce PDFs/Images** 1. Design your template(s) using our intuitive drag-and-drop template editor or the HTML editor and save it. 2. Integrate your workflow, either with platforms like Zapier, Make.com/Integromat, Bubble.io, or any programming languages that support REST API, to send us the JSON data along with the template ID/URL/or HTML content. 3. Our REST API will then return a download URL for the images (in PNG and JPEG formats) or PDFs.  # Authentication Upon signing up for an account, an API key will be generated for you. If needed, you can reset this API key via the web console (under the \"API Integration\" section).  To integrate with our services, you need to authenticate with the APITemplate.io API. Provide your secret key in the request header using the X-API-KEY field.   # Content Type and CORS  **Request Content-Type** The Content-Type for POST and GET requests is set to application/json.  **Cross-Origin Resource Sharing** This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/). And that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.    # Regional API endpoint(s) A regional API endpoint is intended for customers in the same region. The data for the request and generated PDFs/images are processed and stored within the region.  The regions are:  | Region               | Endpoint                            | Max Timeout (Seconds) | Max Payload Size(MB)** | |----------------------|-------------------------------------|-----------------------|-------------------------| | Default (Singapore)  | https://rest.apitemplate.io         | 100                   | 1                       | | Europe (Frankfurt)   | https://rest-de.apitemplate.io      | 100                   | 1                       | | US East (N. Virginia)| https://rest-us.apitemplate.io      | 100                   | 1                       | | Australia (Sydney)   | https://rest-au.apitemplate.io      | 30                    | 6                       |   Alternative Regions: | Region               | Endpoint                            | Max Timeout (Seconds) | Max Payload Size(MB)** | |----------------------|-------------------------------------|-----------------------|-------------------------| | Default (Singapore)  | https://rest-alt.apitemplate.io     | 30                    | 6                       | | Europe (Frankfurt)   | https://rest-alt-de.apitemplate.io  | 30                    | 6                       | | US East (N. Virginia)| https://rest-alt-us.apitemplate.io  | 30                    | 6                       |  ** Note: - Payload size applies to request and response - If \"export_type\" is set to `json` which output file that on AWS S3 doesn't have the limitation - If the \"export_type\" is set to `file` which returns binary data of the generated PDF, the file size of the generated PDF is limited to either 6MB or 1MB based on the region    Other regions are available on request, contact us at hello@apitemplate.io for more information  # Rate limiting Our API endpoints use IP-based rate limiting to ensure fair usage and prevent abuse. Users are allowed to make up to **100 requests per 10 seconds**. This rate limit is designed to accommodate a reasonable volume of requests while maintaining optimal performance for all users.  However, if you exceed this limit and make additional requests, you will receive a response with HTTP code 429. This status code indicates that you have reached the rate limit and need to wait before making further requests. 
 *
 * The version of the OpenAPI document: Version 2.0
 * Contact: hello@apitemplate.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error;
import org.openapitools.client.model.MergePdfsRequest;
import org.openapitools.client.model.ResponseSuccessSingleFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PdfManipulationApiApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PdfManipulationApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PdfManipulationApiApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for mergePdfs
     * @param mergePdfsRequest  (required)
     * @param postactionS3Filekey - This is to specify the file name for &#x60;Post Action(S3 Storage)&#x60;. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter  (optional)
     * @param postactionS3Bucket - This is to overwrite the AWS Bucket for &#x60;Post Action(S3 Storage)&#x60;.  (optional)
     * @param meta - Specify an external reference ID for your own reference. It appears in the &#x60;list-objects&#x60; API.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns status and output file </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mergePdfsCall(MergePdfsRequest mergePdfsRequest, String postactionS3Filekey, String postactionS3Bucket, String meta, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = mergePdfsRequest;

        // create path and map variables
        String localVarPath = "/v2/merge-pdfs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (postactionS3Filekey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("postaction_s3_filekey", postactionS3Filekey));
        }

        if (postactionS3Bucket != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("postaction_s3_bucket", postactionS3Bucket));
        }

        if (meta != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("meta", meta));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mergePdfsValidateBeforeCall(MergePdfsRequest mergePdfsRequest, String postactionS3Filekey, String postactionS3Bucket, String meta, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mergePdfsRequest' is set
        if (mergePdfsRequest == null) {
            throw new ApiException("Missing the required parameter 'mergePdfsRequest' when calling mergePdfs(Async)");
        }

        return mergePdfsCall(mergePdfsRequest, postactionS3Filekey, postactionS3Bucket, meta, _callback);

    }

    /**
     * Join/Merge multiple PDFs
     * This endpoint merges/joins multiple PDF URLs into a single PDF file
     * @param mergePdfsRequest  (required)
     * @param postactionS3Filekey - This is to specify the file name for &#x60;Post Action(S3 Storage)&#x60;. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter  (optional)
     * @param postactionS3Bucket - This is to overwrite the AWS Bucket for &#x60;Post Action(S3 Storage)&#x60;.  (optional)
     * @param meta - Specify an external reference ID for your own reference. It appears in the &#x60;list-objects&#x60; API.  (optional)
     * @return ResponseSuccessSingleFile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns status and output file </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseSuccessSingleFile mergePdfs(MergePdfsRequest mergePdfsRequest, String postactionS3Filekey, String postactionS3Bucket, String meta) throws ApiException {
        ApiResponse<ResponseSuccessSingleFile> localVarResp = mergePdfsWithHttpInfo(mergePdfsRequest, postactionS3Filekey, postactionS3Bucket, meta);
        return localVarResp.getData();
    }

    /**
     * Join/Merge multiple PDFs
     * This endpoint merges/joins multiple PDF URLs into a single PDF file
     * @param mergePdfsRequest  (required)
     * @param postactionS3Filekey - This is to specify the file name for &#x60;Post Action(S3 Storage)&#x60;. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter  (optional)
     * @param postactionS3Bucket - This is to overwrite the AWS Bucket for &#x60;Post Action(S3 Storage)&#x60;.  (optional)
     * @param meta - Specify an external reference ID for your own reference. It appears in the &#x60;list-objects&#x60; API.  (optional)
     * @return ApiResponse&lt;ResponseSuccessSingleFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns status and output file </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseSuccessSingleFile> mergePdfsWithHttpInfo(MergePdfsRequest mergePdfsRequest, String postactionS3Filekey, String postactionS3Bucket, String meta) throws ApiException {
        okhttp3.Call localVarCall = mergePdfsValidateBeforeCall(mergePdfsRequest, postactionS3Filekey, postactionS3Bucket, meta, null);
        Type localVarReturnType = new TypeToken<ResponseSuccessSingleFile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Join/Merge multiple PDFs (asynchronously)
     * This endpoint merges/joins multiple PDF URLs into a single PDF file
     * @param mergePdfsRequest  (required)
     * @param postactionS3Filekey - This is to specify the file name for &#x60;Post Action(S3 Storage)&#x60;. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter  (optional)
     * @param postactionS3Bucket - This is to overwrite the AWS Bucket for &#x60;Post Action(S3 Storage)&#x60;.  (optional)
     * @param meta - Specify an external reference ID for your own reference. It appears in the &#x60;list-objects&#x60; API.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns status and output file </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mergePdfsAsync(MergePdfsRequest mergePdfsRequest, String postactionS3Filekey, String postactionS3Bucket, String meta, final ApiCallback<ResponseSuccessSingleFile> _callback) throws ApiException {

        okhttp3.Call localVarCall = mergePdfsValidateBeforeCall(mergePdfsRequest, postactionS3Filekey, postactionS3Bucket, meta, _callback);
        Type localVarReturnType = new TypeToken<ResponseSuccessSingleFile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
