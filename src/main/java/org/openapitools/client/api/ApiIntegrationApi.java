/*
 * APITemplate.io API Reference
 * # Introduction   Welcome to the [APITemplate.io](https://apitemplate.io) API v2!  APITemplate.io provides PDF generation services including [Template-based PDF generation](https://apitemplate.io/pdf-generation-api/), [HTML to PDF](https://apitemplate.io/html-to-pdf-api/), and [URL to PDF conversions](https://apitemplate.io/create-pdf-from-url/), as well as an [image generation API](https://apitemplate.io/image-generation-api/).  This page contains the documentation on how to use APITemplate.io through API calls. With the APITemplate.io API, you can create PDF documents and images, as well as manage your templates.  Our API is built on RESTful HTTP, so you can utilize any HTTP/REST library of your choice in your preferred programming language to interact with APITemplate.io's API.  **Steps to produce PDFs/Images** 1. Design your template(s) using our intuitive drag-and-drop template editor or the HTML editor and save it. 2. Integrate your workflow, either with platforms like Zapier, Make.com/Integromat, Bubble.io, or any programming languages that support REST API, to send us the JSON data along with the template ID/URL/or HTML content. 3. Our REST API will then return a download URL for the images (in PNG and JPEG formats) or PDFs.  # Authentication Upon signing up for an account, an API key will be generated for you. If needed, you can reset this API key via the web console (under the \"API Integration\" section).  To integrate with our services, you need to authenticate with the APITemplate.io API. Provide your secret key in the request header using the X-API-KEY field.   # Content Type and CORS  **Request Content-Type** The Content-Type for POST and GET requests is set to application/json.  **Cross-Origin Resource Sharing** This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/). And that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.    # Regional API endpoint(s) A regional API endpoint is intended for customers in the same region. The data for the request and generated PDFs/images are processed and stored within the region.  The regions are:  | Region               | Endpoint                            | Max Timeout (Seconds) | Max Payload Size(MB)** | |----------------------|-------------------------------------|-----------------------|-------------------------| | Default (Singapore)  | https://rest.apitemplate.io         | 100                   | 1                       | | Europe (Frankfurt)   | https://rest-de.apitemplate.io      | 100                   | 1                       | | US East (N. Virginia)| https://rest-us.apitemplate.io      | 100                   | 1                       | | Australia (Sydney)   | https://rest-au.apitemplate.io      | 30                    | 6                       |   Alternative Regions: | Region               | Endpoint                            | Max Timeout (Seconds) | Max Payload Size(MB)** | |----------------------|-------------------------------------|-----------------------|-------------------------| | Default (Singapore)  | https://rest-alt.apitemplate.io     | 30                    | 6                       | | Europe (Frankfurt)   | https://rest-alt-de.apitemplate.io  | 30                    | 6                       | | US East (N. Virginia)| https://rest-alt-us.apitemplate.io  | 30                    | 6                       |  ** Note: - Payload size applies to request and response - If \"export_type\" is set to `json` which output file that on AWS S3 doesn't have the limitation - If the \"export_type\" is set to `file` which returns binary data of the generated PDF, the file size of the generated PDF is limited to either 6MB or 1MB based on the region    Other regions are available on request, contact us at hello@apitemplate.io for more information  # Rate limiting Our API endpoints use IP-based rate limiting to ensure fair usage and prevent abuse. Users are allowed to make up to **100 requests per 10 seconds**. This rate limit is designed to accommodate a reasonable volume of requests while maintaining optimal performance for all users.  However, if you exceed this limit and make additional requests, you will receive a response with HTTP code 429. This status code indicates that you have reached the rate limit and need to wait before making further requests. 
 *
 * The version of the OpenAPI document: Version 2.0
 * Contact: hello@apitemplate.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreatePdfFromHtmlRequest;
import org.openapitools.client.model.CreatePdfFromUrlRequest;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.ResponseSuccessDeleteObject;
import org.openapitools.client.model.ResponseSuccessImageFile;
import org.openapitools.client.model.ResponseSuccessListObjects;
import org.openapitools.client.model.ResponseSuccessPDFFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ApiIntegrationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ApiIntegrationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ApiIntegrationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createImage
     * @param templateId Your template id, it can be obtained in the web console (required)
     * @param body  (required)
     * @param outputImageType - Output image type(JPEG or PNG format), default to &#x60;all&#x60;. Options are &#x60;all&#x60;, &#x60;jpegOnly&#x60;,&#x60;pngOnly&#x60;.  (optional)
     * @param expiration - Expiration of the generated PDF in minutes(default to &#x60;0&#x60;, store permanently)   - Use &#x60;0&#x60; to store on cdn permanently   - Or use the range between &#x60;1&#x60; minute and &#x60;10080&#x60; minutes(7 days) to specify the expiration of the generated PDF  (optional)
     * @param cloudStorage - Upload the generated PDFs/images to our storage CDN, default to &#x60;1&#x60;. If you have configured &#x60;Post Action&#x60; to upload the PDFs/Images to your own S3, please set it to &#x60;0&#x60;.  (optional)
     * @param postactionS3Filekey - This is to specify the file name for &#x60;Post Action(S3 Storage)&#x60;. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter  (optional)
     * @param postactionS3Bucket - This is to overwrite the AWS Bucket for &#x60;Post Action(S3 Storage)&#x60;.  (optional)
     * @param meta - Specify an external reference ID for your own reference. It appears in the &#x60;list-objects&#x60; API.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns status and output file </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createImageCall(String templateId, Object body, String outputImageType, Integer expiration, Integer cloudStorage, String postactionS3Filekey, String postactionS3Bucket, String meta, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v2/create-image";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (templateId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("template_id", templateId));
        }

        if (outputImageType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("output_image_type", outputImageType));
        }

        if (expiration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expiration", expiration));
        }

        if (cloudStorage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cloud_storage", cloudStorage));
        }

        if (postactionS3Filekey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("postaction_s3_filekey", postactionS3Filekey));
        }

        if (postactionS3Bucket != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("postaction_s3_bucket", postactionS3Bucket));
        }

        if (meta != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("meta", meta));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createImageValidateBeforeCall(String templateId, Object body, String outputImageType, Integer expiration, Integer cloudStorage, String postactionS3Filekey, String postactionS3Bucket, String meta, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling createImage(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createImage(Async)");
        }

        return createImageCall(templateId, body, outputImageType, expiration, cloudStorage, postactionS3Filekey, postactionS3Bucket, meta, _callback);

    }

    /**
     * Create an Image
     * This endpoint creates a JPEG file(along with PNG) with JSON data and your template 
     * @param templateId Your template id, it can be obtained in the web console (required)
     * @param body  (required)
     * @param outputImageType - Output image type(JPEG or PNG format), default to &#x60;all&#x60;. Options are &#x60;all&#x60;, &#x60;jpegOnly&#x60;,&#x60;pngOnly&#x60;.  (optional)
     * @param expiration - Expiration of the generated PDF in minutes(default to &#x60;0&#x60;, store permanently)   - Use &#x60;0&#x60; to store on cdn permanently   - Or use the range between &#x60;1&#x60; minute and &#x60;10080&#x60; minutes(7 days) to specify the expiration of the generated PDF  (optional)
     * @param cloudStorage - Upload the generated PDFs/images to our storage CDN, default to &#x60;1&#x60;. If you have configured &#x60;Post Action&#x60; to upload the PDFs/Images to your own S3, please set it to &#x60;0&#x60;.  (optional)
     * @param postactionS3Filekey - This is to specify the file name for &#x60;Post Action(S3 Storage)&#x60;. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter  (optional)
     * @param postactionS3Bucket - This is to overwrite the AWS Bucket for &#x60;Post Action(S3 Storage)&#x60;.  (optional)
     * @param meta - Specify an external reference ID for your own reference. It appears in the &#x60;list-objects&#x60; API.  (optional)
     * @return ResponseSuccessImageFile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns status and output file </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseSuccessImageFile createImage(String templateId, Object body, String outputImageType, Integer expiration, Integer cloudStorage, String postactionS3Filekey, String postactionS3Bucket, String meta) throws ApiException {
        ApiResponse<ResponseSuccessImageFile> localVarResp = createImageWithHttpInfo(templateId, body, outputImageType, expiration, cloudStorage, postactionS3Filekey, postactionS3Bucket, meta);
        return localVarResp.getData();
    }

    /**
     * Create an Image
     * This endpoint creates a JPEG file(along with PNG) with JSON data and your template 
     * @param templateId Your template id, it can be obtained in the web console (required)
     * @param body  (required)
     * @param outputImageType - Output image type(JPEG or PNG format), default to &#x60;all&#x60;. Options are &#x60;all&#x60;, &#x60;jpegOnly&#x60;,&#x60;pngOnly&#x60;.  (optional)
     * @param expiration - Expiration of the generated PDF in minutes(default to &#x60;0&#x60;, store permanently)   - Use &#x60;0&#x60; to store on cdn permanently   - Or use the range between &#x60;1&#x60; minute and &#x60;10080&#x60; minutes(7 days) to specify the expiration of the generated PDF  (optional)
     * @param cloudStorage - Upload the generated PDFs/images to our storage CDN, default to &#x60;1&#x60;. If you have configured &#x60;Post Action&#x60; to upload the PDFs/Images to your own S3, please set it to &#x60;0&#x60;.  (optional)
     * @param postactionS3Filekey - This is to specify the file name for &#x60;Post Action(S3 Storage)&#x60;. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter  (optional)
     * @param postactionS3Bucket - This is to overwrite the AWS Bucket for &#x60;Post Action(S3 Storage)&#x60;.  (optional)
     * @param meta - Specify an external reference ID for your own reference. It appears in the &#x60;list-objects&#x60; API.  (optional)
     * @return ApiResponse&lt;ResponseSuccessImageFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns status and output file </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseSuccessImageFile> createImageWithHttpInfo(String templateId, Object body, String outputImageType, Integer expiration, Integer cloudStorage, String postactionS3Filekey, String postactionS3Bucket, String meta) throws ApiException {
        okhttp3.Call localVarCall = createImageValidateBeforeCall(templateId, body, outputImageType, expiration, cloudStorage, postactionS3Filekey, postactionS3Bucket, meta, null);
        Type localVarReturnType = new TypeToken<ResponseSuccessImageFile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an Image (asynchronously)
     * This endpoint creates a JPEG file(along with PNG) with JSON data and your template 
     * @param templateId Your template id, it can be obtained in the web console (required)
     * @param body  (required)
     * @param outputImageType - Output image type(JPEG or PNG format), default to &#x60;all&#x60;. Options are &#x60;all&#x60;, &#x60;jpegOnly&#x60;,&#x60;pngOnly&#x60;.  (optional)
     * @param expiration - Expiration of the generated PDF in minutes(default to &#x60;0&#x60;, store permanently)   - Use &#x60;0&#x60; to store on cdn permanently   - Or use the range between &#x60;1&#x60; minute and &#x60;10080&#x60; minutes(7 days) to specify the expiration of the generated PDF  (optional)
     * @param cloudStorage - Upload the generated PDFs/images to our storage CDN, default to &#x60;1&#x60;. If you have configured &#x60;Post Action&#x60; to upload the PDFs/Images to your own S3, please set it to &#x60;0&#x60;.  (optional)
     * @param postactionS3Filekey - This is to specify the file name for &#x60;Post Action(S3 Storage)&#x60;. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter  (optional)
     * @param postactionS3Bucket - This is to overwrite the AWS Bucket for &#x60;Post Action(S3 Storage)&#x60;.  (optional)
     * @param meta - Specify an external reference ID for your own reference. It appears in the &#x60;list-objects&#x60; API.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns status and output file </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createImageAsync(String templateId, Object body, String outputImageType, Integer expiration, Integer cloudStorage, String postactionS3Filekey, String postactionS3Bucket, String meta, final ApiCallback<ResponseSuccessImageFile> _callback) throws ApiException {

        okhttp3.Call localVarCall = createImageValidateBeforeCall(templateId, body, outputImageType, expiration, cloudStorage, postactionS3Filekey, postactionS3Bucket, meta, _callback);
        Type localVarReturnType = new TypeToken<ResponseSuccessImageFile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPdf
     * @param templateId Your template id, it can be obtained in the web console (required)
     * @param body  (required)
     * @param exportType - Either &#x60;file&#x60; or &#x60;json&#x60;(Default).   - The option &#x60;json&#x60; returns a JSON object, and the output PDF is stored on a CDN. Use this with the parameter &#x60;expiration&#x60;   - The option &#x60;file&#x60; returns binary data of the generated PDF(Secure and completely private) and the response HTTP header Content-Disposition is set to attachment.  (optional)
     * @param expiration - Expiration of the generated PDF in minutes(default to &#x60;0&#x60;, store permanently)   - Use &#x60;0&#x60; to store on cdn permanently   - Or use the range between &#x60;1&#x60; minute and &#x60;10080&#x60; minutes(7 days) to specify the expiration of the generated PDF  (optional)
     * @param outputHtml - Either &#x60;1&#x60; or &#x60;0&#x60;(Default). - To enable output of html content, set the value to &#x60;1&#x60; and it will return in the JSON response as html_url field (as a URL)  (optional)
     * @param outputFormat - Either &#x60;pdf&#x60;(Default) or &#x60;html&#x60;. - It&#39;s generating PDF by default. However, you can specify output_format&#x3D;html to generate only HTML(It will return in the JSON response as download_url field as a URL).  (optional)
     * @param filename - Default to UUID (e.g 0c93bd9e-9ebb-4634-a70f-de9131848416.pdf). Use this to specify custom file name, it should end with &#x60;.pdf&#x60;  (optional)
     * @param imageResampleRes - We embed the original images by default, meaning large PDF file sizes. Specifying the option &#39;image_resample_res&#39; helps reduce the PDF file size by downsampling the images of the current PDF to a resolution(in DPI). Common values are 72, 96, 150, 300 and 600.  (optional)
     * @param isCmyk - Use CMYK color profile, 1&#x3D;true, 0&#x3D;false. Default to &#39;0&#39;  (optional)
     * @param cloudStorage - Upload the generated PDFs/images to our storage CDN, default to &#x60;1&#x60;. If you have configured &#x60;Post Action&#x60; to upload the PDFs/Images to your own S3, please set it to &#x60;0&#x60;.  (optional)
     * @param pdfStandard Default to PDF1.4. Options are PDFA1B, PDFA2 and PDFA3 (This is an experimental feature)  (optional)
     * @param postactionS3Filekey - This is to specify the file name for &#x60;Post Action(S3 Storage)&#x60;. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter  (optional)
     * @param postactionS3Bucket - This is to overwrite the AWS Bucket for &#x60;Post Action(S3 Storage)&#x60;.  (optional)
     * @param meta - Specify an external reference ID for your own reference. It appears in the &#x60;list-objects&#x60; API.  (optional)
     * @param async - Either &#x60;1&#x60; or &#x60;0&#x60;(Default).  &#x60;0&#x60; is synchronous call(default), &#x60;1&#x60; is asynchronous call - To generate PDF asynchronously, set the value to &#x60;1&#x60; and the API call returns immediately. Once the PDF document is generated, we will make a HTTP/HTTPS GET to your URL(webhook_url) and will retry for 3 times before giving up. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then &#x60;webhook_url&#x60; is mandatory  (optional)
     * @param webhookUrl - It is the URL of your webhook URL, it starts with http:// or https:// and has to be urlencoded. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then you have to specify the &#x60;webhook_url&#x60;.   #### Format of Webhook callback  Once the PDF is generated, we will initiate a HTTP/HTTPS GET call to the following URL:  https://&#x60;[yourwebserver.com]&#x60;?&amp;primary_url&#x3D;&#x60;[primary_url]&#x60;&amp;transaction_ref&#x3D;&#x60;[transaction_ref]&#x60;&amp;status&#x3D;&#x60;[status]&#x60;&amp;message&#x3D;&#x60;[message]&#x60;  - &#x60;[yourwebserver.com]&#x60;: The web services to handle the callback, which is the &#x60;webhook_url&#x60; - &#x60;[primary_url]&#x60;: The URL to the PDF document - &#x60;[transaction_ref]&#x60;: The transaction reference number - &#x60;[status]&#x60; : Status of the transaction, either &#x60;success&#x60; or &#x60;error&#x60; - &#x60;[message]&#x60; : Status message  ***The following is a sample webhook call back to your server***  https://yourwebserver.com?&amp;primary_url&#x3D;https%3A%2F%2Fpub-cdn.apitemplate.io%2F2021%2F06%2Fb692183d-46d7-3213-891a-460a5814ad3f.pdf&amp;transaction_ref&#x3D;b692183d-46d7-3213-891a-460a5814ad3f&amp;status&#x3D;success  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns status and output file </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPdfCall(String templateId, Object body, String exportType, Integer expiration, String outputHtml, String outputFormat, String filename, String imageResampleRes, String isCmyk, Integer cloudStorage, String pdfStandard, String postactionS3Filekey, String postactionS3Bucket, String meta, String async, String webhookUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v2/create-pdf";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (templateId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("template_id", templateId));
        }

        if (exportType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("export_type", exportType));
        }

        if (expiration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expiration", expiration));
        }

        if (outputHtml != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("output_html", outputHtml));
        }

        if (outputFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("output_format", outputFormat));
        }

        if (filename != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filename", filename));
        }

        if (imageResampleRes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("image_resample_res", imageResampleRes));
        }

        if (isCmyk != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_cmyk", isCmyk));
        }

        if (cloudStorage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cloud_storage", cloudStorage));
        }

        if (pdfStandard != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pdf_standard", pdfStandard));
        }

        if (postactionS3Filekey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("postaction_s3_filekey", postactionS3Filekey));
        }

        if (postactionS3Bucket != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("postaction_s3_bucket", postactionS3Bucket));
        }

        if (meta != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("meta", meta));
        }

        if (async != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("async", async));
        }

        if (webhookUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webhook_url", webhookUrl));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPdfValidateBeforeCall(String templateId, Object body, String exportType, Integer expiration, String outputHtml, String outputFormat, String filename, String imageResampleRes, String isCmyk, Integer cloudStorage, String pdfStandard, String postactionS3Filekey, String postactionS3Bucket, String meta, String async, String webhookUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling createPdf(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createPdf(Async)");
        }

        return createPdfCall(templateId, body, exportType, expiration, outputHtml, outputFormat, filename, imageResampleRes, isCmyk, cloudStorage, pdfStandard, postactionS3Filekey, postactionS3Bucket, meta, async, webhookUrl, _callback);

    }

    /**
     * Create a PDF
     * This endpoint creates a PDF file with JSON data and your template. We support synchoronus and asynchronous PDF generation.
     * @param templateId Your template id, it can be obtained in the web console (required)
     * @param body  (required)
     * @param exportType - Either &#x60;file&#x60; or &#x60;json&#x60;(Default).   - The option &#x60;json&#x60; returns a JSON object, and the output PDF is stored on a CDN. Use this with the parameter &#x60;expiration&#x60;   - The option &#x60;file&#x60; returns binary data of the generated PDF(Secure and completely private) and the response HTTP header Content-Disposition is set to attachment.  (optional)
     * @param expiration - Expiration of the generated PDF in minutes(default to &#x60;0&#x60;, store permanently)   - Use &#x60;0&#x60; to store on cdn permanently   - Or use the range between &#x60;1&#x60; minute and &#x60;10080&#x60; minutes(7 days) to specify the expiration of the generated PDF  (optional)
     * @param outputHtml - Either &#x60;1&#x60; or &#x60;0&#x60;(Default). - To enable output of html content, set the value to &#x60;1&#x60; and it will return in the JSON response as html_url field (as a URL)  (optional)
     * @param outputFormat - Either &#x60;pdf&#x60;(Default) or &#x60;html&#x60;. - It&#39;s generating PDF by default. However, you can specify output_format&#x3D;html to generate only HTML(It will return in the JSON response as download_url field as a URL).  (optional)
     * @param filename - Default to UUID (e.g 0c93bd9e-9ebb-4634-a70f-de9131848416.pdf). Use this to specify custom file name, it should end with &#x60;.pdf&#x60;  (optional)
     * @param imageResampleRes - We embed the original images by default, meaning large PDF file sizes. Specifying the option &#39;image_resample_res&#39; helps reduce the PDF file size by downsampling the images of the current PDF to a resolution(in DPI). Common values are 72, 96, 150, 300 and 600.  (optional)
     * @param isCmyk - Use CMYK color profile, 1&#x3D;true, 0&#x3D;false. Default to &#39;0&#39;  (optional)
     * @param cloudStorage - Upload the generated PDFs/images to our storage CDN, default to &#x60;1&#x60;. If you have configured &#x60;Post Action&#x60; to upload the PDFs/Images to your own S3, please set it to &#x60;0&#x60;.  (optional)
     * @param pdfStandard Default to PDF1.4. Options are PDFA1B, PDFA2 and PDFA3 (This is an experimental feature)  (optional)
     * @param postactionS3Filekey - This is to specify the file name for &#x60;Post Action(S3 Storage)&#x60;. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter  (optional)
     * @param postactionS3Bucket - This is to overwrite the AWS Bucket for &#x60;Post Action(S3 Storage)&#x60;.  (optional)
     * @param meta - Specify an external reference ID for your own reference. It appears in the &#x60;list-objects&#x60; API.  (optional)
     * @param async - Either &#x60;1&#x60; or &#x60;0&#x60;(Default).  &#x60;0&#x60; is synchronous call(default), &#x60;1&#x60; is asynchronous call - To generate PDF asynchronously, set the value to &#x60;1&#x60; and the API call returns immediately. Once the PDF document is generated, we will make a HTTP/HTTPS GET to your URL(webhook_url) and will retry for 3 times before giving up. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then &#x60;webhook_url&#x60; is mandatory  (optional)
     * @param webhookUrl - It is the URL of your webhook URL, it starts with http:// or https:// and has to be urlencoded. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then you have to specify the &#x60;webhook_url&#x60;.   #### Format of Webhook callback  Once the PDF is generated, we will initiate a HTTP/HTTPS GET call to the following URL:  https://&#x60;[yourwebserver.com]&#x60;?&amp;primary_url&#x3D;&#x60;[primary_url]&#x60;&amp;transaction_ref&#x3D;&#x60;[transaction_ref]&#x60;&amp;status&#x3D;&#x60;[status]&#x60;&amp;message&#x3D;&#x60;[message]&#x60;  - &#x60;[yourwebserver.com]&#x60;: The web services to handle the callback, which is the &#x60;webhook_url&#x60; - &#x60;[primary_url]&#x60;: The URL to the PDF document - &#x60;[transaction_ref]&#x60;: The transaction reference number - &#x60;[status]&#x60; : Status of the transaction, either &#x60;success&#x60; or &#x60;error&#x60; - &#x60;[message]&#x60; : Status message  ***The following is a sample webhook call back to your server***  https://yourwebserver.com?&amp;primary_url&#x3D;https%3A%2F%2Fpub-cdn.apitemplate.io%2F2021%2F06%2Fb692183d-46d7-3213-891a-460a5814ad3f.pdf&amp;transaction_ref&#x3D;b692183d-46d7-3213-891a-460a5814ad3f&amp;status&#x3D;success  (optional)
     * @return ResponseSuccessPDFFile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns status and output file </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseSuccessPDFFile createPdf(String templateId, Object body, String exportType, Integer expiration, String outputHtml, String outputFormat, String filename, String imageResampleRes, String isCmyk, Integer cloudStorage, String pdfStandard, String postactionS3Filekey, String postactionS3Bucket, String meta, String async, String webhookUrl) throws ApiException {
        ApiResponse<ResponseSuccessPDFFile> localVarResp = createPdfWithHttpInfo(templateId, body, exportType, expiration, outputHtml, outputFormat, filename, imageResampleRes, isCmyk, cloudStorage, pdfStandard, postactionS3Filekey, postactionS3Bucket, meta, async, webhookUrl);
        return localVarResp.getData();
    }

    /**
     * Create a PDF
     * This endpoint creates a PDF file with JSON data and your template. We support synchoronus and asynchronous PDF generation.
     * @param templateId Your template id, it can be obtained in the web console (required)
     * @param body  (required)
     * @param exportType - Either &#x60;file&#x60; or &#x60;json&#x60;(Default).   - The option &#x60;json&#x60; returns a JSON object, and the output PDF is stored on a CDN. Use this with the parameter &#x60;expiration&#x60;   - The option &#x60;file&#x60; returns binary data of the generated PDF(Secure and completely private) and the response HTTP header Content-Disposition is set to attachment.  (optional)
     * @param expiration - Expiration of the generated PDF in minutes(default to &#x60;0&#x60;, store permanently)   - Use &#x60;0&#x60; to store on cdn permanently   - Or use the range between &#x60;1&#x60; minute and &#x60;10080&#x60; minutes(7 days) to specify the expiration of the generated PDF  (optional)
     * @param outputHtml - Either &#x60;1&#x60; or &#x60;0&#x60;(Default). - To enable output of html content, set the value to &#x60;1&#x60; and it will return in the JSON response as html_url field (as a URL)  (optional)
     * @param outputFormat - Either &#x60;pdf&#x60;(Default) or &#x60;html&#x60;. - It&#39;s generating PDF by default. However, you can specify output_format&#x3D;html to generate only HTML(It will return in the JSON response as download_url field as a URL).  (optional)
     * @param filename - Default to UUID (e.g 0c93bd9e-9ebb-4634-a70f-de9131848416.pdf). Use this to specify custom file name, it should end with &#x60;.pdf&#x60;  (optional)
     * @param imageResampleRes - We embed the original images by default, meaning large PDF file sizes. Specifying the option &#39;image_resample_res&#39; helps reduce the PDF file size by downsampling the images of the current PDF to a resolution(in DPI). Common values are 72, 96, 150, 300 and 600.  (optional)
     * @param isCmyk - Use CMYK color profile, 1&#x3D;true, 0&#x3D;false. Default to &#39;0&#39;  (optional)
     * @param cloudStorage - Upload the generated PDFs/images to our storage CDN, default to &#x60;1&#x60;. If you have configured &#x60;Post Action&#x60; to upload the PDFs/Images to your own S3, please set it to &#x60;0&#x60;.  (optional)
     * @param pdfStandard Default to PDF1.4. Options are PDFA1B, PDFA2 and PDFA3 (This is an experimental feature)  (optional)
     * @param postactionS3Filekey - This is to specify the file name for &#x60;Post Action(S3 Storage)&#x60;. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter  (optional)
     * @param postactionS3Bucket - This is to overwrite the AWS Bucket for &#x60;Post Action(S3 Storage)&#x60;.  (optional)
     * @param meta - Specify an external reference ID for your own reference. It appears in the &#x60;list-objects&#x60; API.  (optional)
     * @param async - Either &#x60;1&#x60; or &#x60;0&#x60;(Default).  &#x60;0&#x60; is synchronous call(default), &#x60;1&#x60; is asynchronous call - To generate PDF asynchronously, set the value to &#x60;1&#x60; and the API call returns immediately. Once the PDF document is generated, we will make a HTTP/HTTPS GET to your URL(webhook_url) and will retry for 3 times before giving up. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then &#x60;webhook_url&#x60; is mandatory  (optional)
     * @param webhookUrl - It is the URL of your webhook URL, it starts with http:// or https:// and has to be urlencoded. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then you have to specify the &#x60;webhook_url&#x60;.   #### Format of Webhook callback  Once the PDF is generated, we will initiate a HTTP/HTTPS GET call to the following URL:  https://&#x60;[yourwebserver.com]&#x60;?&amp;primary_url&#x3D;&#x60;[primary_url]&#x60;&amp;transaction_ref&#x3D;&#x60;[transaction_ref]&#x60;&amp;status&#x3D;&#x60;[status]&#x60;&amp;message&#x3D;&#x60;[message]&#x60;  - &#x60;[yourwebserver.com]&#x60;: The web services to handle the callback, which is the &#x60;webhook_url&#x60; - &#x60;[primary_url]&#x60;: The URL to the PDF document - &#x60;[transaction_ref]&#x60;: The transaction reference number - &#x60;[status]&#x60; : Status of the transaction, either &#x60;success&#x60; or &#x60;error&#x60; - &#x60;[message]&#x60; : Status message  ***The following is a sample webhook call back to your server***  https://yourwebserver.com?&amp;primary_url&#x3D;https%3A%2F%2Fpub-cdn.apitemplate.io%2F2021%2F06%2Fb692183d-46d7-3213-891a-460a5814ad3f.pdf&amp;transaction_ref&#x3D;b692183d-46d7-3213-891a-460a5814ad3f&amp;status&#x3D;success  (optional)
     * @return ApiResponse&lt;ResponseSuccessPDFFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns status and output file </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseSuccessPDFFile> createPdfWithHttpInfo(String templateId, Object body, String exportType, Integer expiration, String outputHtml, String outputFormat, String filename, String imageResampleRes, String isCmyk, Integer cloudStorage, String pdfStandard, String postactionS3Filekey, String postactionS3Bucket, String meta, String async, String webhookUrl) throws ApiException {
        okhttp3.Call localVarCall = createPdfValidateBeforeCall(templateId, body, exportType, expiration, outputHtml, outputFormat, filename, imageResampleRes, isCmyk, cloudStorage, pdfStandard, postactionS3Filekey, postactionS3Bucket, meta, async, webhookUrl, null);
        Type localVarReturnType = new TypeToken<ResponseSuccessPDFFile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a PDF (asynchronously)
     * This endpoint creates a PDF file with JSON data and your template. We support synchoronus and asynchronous PDF generation.
     * @param templateId Your template id, it can be obtained in the web console (required)
     * @param body  (required)
     * @param exportType - Either &#x60;file&#x60; or &#x60;json&#x60;(Default).   - The option &#x60;json&#x60; returns a JSON object, and the output PDF is stored on a CDN. Use this with the parameter &#x60;expiration&#x60;   - The option &#x60;file&#x60; returns binary data of the generated PDF(Secure and completely private) and the response HTTP header Content-Disposition is set to attachment.  (optional)
     * @param expiration - Expiration of the generated PDF in minutes(default to &#x60;0&#x60;, store permanently)   - Use &#x60;0&#x60; to store on cdn permanently   - Or use the range between &#x60;1&#x60; minute and &#x60;10080&#x60; minutes(7 days) to specify the expiration of the generated PDF  (optional)
     * @param outputHtml - Either &#x60;1&#x60; or &#x60;0&#x60;(Default). - To enable output of html content, set the value to &#x60;1&#x60; and it will return in the JSON response as html_url field (as a URL)  (optional)
     * @param outputFormat - Either &#x60;pdf&#x60;(Default) or &#x60;html&#x60;. - It&#39;s generating PDF by default. However, you can specify output_format&#x3D;html to generate only HTML(It will return in the JSON response as download_url field as a URL).  (optional)
     * @param filename - Default to UUID (e.g 0c93bd9e-9ebb-4634-a70f-de9131848416.pdf). Use this to specify custom file name, it should end with &#x60;.pdf&#x60;  (optional)
     * @param imageResampleRes - We embed the original images by default, meaning large PDF file sizes. Specifying the option &#39;image_resample_res&#39; helps reduce the PDF file size by downsampling the images of the current PDF to a resolution(in DPI). Common values are 72, 96, 150, 300 and 600.  (optional)
     * @param isCmyk - Use CMYK color profile, 1&#x3D;true, 0&#x3D;false. Default to &#39;0&#39;  (optional)
     * @param cloudStorage - Upload the generated PDFs/images to our storage CDN, default to &#x60;1&#x60;. If you have configured &#x60;Post Action&#x60; to upload the PDFs/Images to your own S3, please set it to &#x60;0&#x60;.  (optional)
     * @param pdfStandard Default to PDF1.4. Options are PDFA1B, PDFA2 and PDFA3 (This is an experimental feature)  (optional)
     * @param postactionS3Filekey - This is to specify the file name for &#x60;Post Action(S3 Storage)&#x60;. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter  (optional)
     * @param postactionS3Bucket - This is to overwrite the AWS Bucket for &#x60;Post Action(S3 Storage)&#x60;.  (optional)
     * @param meta - Specify an external reference ID for your own reference. It appears in the &#x60;list-objects&#x60; API.  (optional)
     * @param async - Either &#x60;1&#x60; or &#x60;0&#x60;(Default).  &#x60;0&#x60; is synchronous call(default), &#x60;1&#x60; is asynchronous call - To generate PDF asynchronously, set the value to &#x60;1&#x60; and the API call returns immediately. Once the PDF document is generated, we will make a HTTP/HTTPS GET to your URL(webhook_url) and will retry for 3 times before giving up. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then &#x60;webhook_url&#x60; is mandatory  (optional)
     * @param webhookUrl - It is the URL of your webhook URL, it starts with http:// or https:// and has to be urlencoded. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then you have to specify the &#x60;webhook_url&#x60;.   #### Format of Webhook callback  Once the PDF is generated, we will initiate a HTTP/HTTPS GET call to the following URL:  https://&#x60;[yourwebserver.com]&#x60;?&amp;primary_url&#x3D;&#x60;[primary_url]&#x60;&amp;transaction_ref&#x3D;&#x60;[transaction_ref]&#x60;&amp;status&#x3D;&#x60;[status]&#x60;&amp;message&#x3D;&#x60;[message]&#x60;  - &#x60;[yourwebserver.com]&#x60;: The web services to handle the callback, which is the &#x60;webhook_url&#x60; - &#x60;[primary_url]&#x60;: The URL to the PDF document - &#x60;[transaction_ref]&#x60;: The transaction reference number - &#x60;[status]&#x60; : Status of the transaction, either &#x60;success&#x60; or &#x60;error&#x60; - &#x60;[message]&#x60; : Status message  ***The following is a sample webhook call back to your server***  https://yourwebserver.com?&amp;primary_url&#x3D;https%3A%2F%2Fpub-cdn.apitemplate.io%2F2021%2F06%2Fb692183d-46d7-3213-891a-460a5814ad3f.pdf&amp;transaction_ref&#x3D;b692183d-46d7-3213-891a-460a5814ad3f&amp;status&#x3D;success  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns status and output file </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPdfAsync(String templateId, Object body, String exportType, Integer expiration, String outputHtml, String outputFormat, String filename, String imageResampleRes, String isCmyk, Integer cloudStorage, String pdfStandard, String postactionS3Filekey, String postactionS3Bucket, String meta, String async, String webhookUrl, final ApiCallback<ResponseSuccessPDFFile> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPdfValidateBeforeCall(templateId, body, exportType, expiration, outputHtml, outputFormat, filename, imageResampleRes, isCmyk, cloudStorage, pdfStandard, postactionS3Filekey, postactionS3Bucket, meta, async, webhookUrl, _callback);
        Type localVarReturnType = new TypeToken<ResponseSuccessPDFFile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPdfFromHtml
     * @param createPdfFromHtmlRequest  (required)
     * @param exportType - Either &#x60;file&#x60; or &#x60;json&#x60;(Default).   - The option &#x60;json&#x60; returns a JSON object, and the output PDF is stored on a CDN. Use this with the parameter &#x60;expiration&#x60;   - The option &#x60;file&#x60; returns binary data of the generated PDF(Secure and completely private) and the response HTTP header Content-Disposition is set to attachment.  (optional)
     * @param expiration - Expiration of the generated PDF in minutes(default to &#x60;0&#x60;, store permanently)   - Use &#x60;0&#x60; to store on cdn permanently   - Or use the range between &#x60;1&#x60; minute and &#x60;10080&#x60; minutes(7 days) to specify the expiration of the generated PDF  (optional)
     * @param outputFormat - Either &#x60;pdf&#x60;(Default) or &#x60;html&#x60;. - It&#39;s generating PDF by default. However, you can specify output_format&#x3D;html to generate only HTML(It will return in the JSON response as download_url field as a URL).  (optional)
     * @param filename - Default to UUID (e.g 0c93bd9e-9ebb-4634-a70f-de9131848416.pdf). Use this to specify custom file name, it should end with &#x60;.pdf&#x60;  (optional)
     * @param imageResampleRes - We embed the original images by default, meaning large PDF file sizes. Specifying the option &#39;image_resample_res&#39; helps reduce the PDF file size by downsampling the images of the current PDF to a resolution(in DPI). Common values are 72, 96, 150, 300 and 600.  (optional)
     * @param isCmyk - Use CMYK color profile, 1&#x3D;true, 0&#x3D;false. Default to &#39;0&#39;  (optional)
     * @param cloudStorage - Upload the generated PDFs/images to our storage CDN, default to &#x60;1&#x60;. If you have configured &#x60;Post Action&#x60; to upload the PDFs/Images to your own S3, please set it to &#x60;0&#x60;.  (optional)
     * @param pdfStandard Default to PDF1.4. Options are PDFA1B, PDFA2 and PDFA3 (This is an experimental feature)  (optional)
     * @param postactionS3Filekey - This is to specify the file name for &#x60;Post Action(S3 Storage)&#x60;. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter  (optional)
     * @param postactionS3Bucket - This is to overwrite the AWS Bucket for &#x60;Post Action(S3 Storage)&#x60;.  (optional)
     * @param meta - Specify an external reference ID for your own reference. It appears in the &#x60;list-objects&#x60; API.  (optional)
     * @param async - Either &#x60;1&#x60; or &#x60;0&#x60;(Default).  &#x60;0&#x60; is synchronous call(default), &#x60;1&#x60; is asynchronous call - To generate PDF asynchronously, set the value to &#x60;1&#x60; and the API call returns immediately. Once the PDF document is generated, we will make a HTTP/HTTPS GET to your URL(webhook_url) and will retry for 3 times before giving up. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then &#x60;webhook_url&#x60; is mandatory  (optional)
     * @param webhookUrl - It is the URL of your webhook URL, it starts with http:// or https:// and has to be urlencoded. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then you have to specify the &#x60;webhook_url&#x60;.   #### Format of Webhook callback  Once the PDF is generated, we will initiate a HTTP/HTTPS GET call to the following URL:  https://&#x60;[yourwebserver.com]&#x60;?&amp;primary_url&#x3D;&#x60;[primary_url]&#x60;&amp;transaction_ref&#x3D;&#x60;[transaction_ref]&#x60;&amp;status&#x3D;&#x60;[status]&#x60;&amp;message&#x3D;&#x60;[message]&#x60;  - &#x60;[yourwebserver.com]&#x60;: The web services to handle the callback, which is the &#x60;webhook_url&#x60; - &#x60;[primary_url]&#x60;: The URL to the PDF document - &#x60;[transaction_ref]&#x60;: The transaction reference number - &#x60;[status]&#x60; : Status of the transaction, either &#x60;success&#x60; or &#x60;error&#x60; - &#x60;[message]&#x60; : Status message  ***The following is a sample webhook call back to your server***  https://yourwebserver.com?&amp;primary_url&#x3D;https%3A%2F%2Fpub-cdn.apitemplate.io%2F2021%2F06%2Fb692183d-46d7-3213-891a-460a5814ad3f.pdf&amp;transaction_ref&#x3D;b692183d-46d7-3213-891a-460a5814ad3f&amp;status&#x3D;success  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns status and output file </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPdfFromHtmlCall(CreatePdfFromHtmlRequest createPdfFromHtmlRequest, String exportType, Integer expiration, String outputFormat, String filename, String imageResampleRes, String isCmyk, Integer cloudStorage, String pdfStandard, String postactionS3Filekey, String postactionS3Bucket, String meta, String async, String webhookUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createPdfFromHtmlRequest;

        // create path and map variables
        String localVarPath = "/v2/create-pdf-from-html";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (exportType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("export_type", exportType));
        }

        if (expiration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expiration", expiration));
        }

        if (outputFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("output_format", outputFormat));
        }

        if (filename != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filename", filename));
        }

        if (imageResampleRes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("image_resample_res", imageResampleRes));
        }

        if (isCmyk != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_cmyk", isCmyk));
        }

        if (cloudStorage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cloud_storage", cloudStorage));
        }

        if (pdfStandard != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pdf_standard", pdfStandard));
        }

        if (postactionS3Filekey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("postaction_s3_filekey", postactionS3Filekey));
        }

        if (postactionS3Bucket != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("postaction_s3_bucket", postactionS3Bucket));
        }

        if (meta != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("meta", meta));
        }

        if (async != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("async", async));
        }

        if (webhookUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webhook_url", webhookUrl));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPdfFromHtmlValidateBeforeCall(CreatePdfFromHtmlRequest createPdfFromHtmlRequest, String exportType, Integer expiration, String outputFormat, String filename, String imageResampleRes, String isCmyk, Integer cloudStorage, String pdfStandard, String postactionS3Filekey, String postactionS3Bucket, String meta, String async, String webhookUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createPdfFromHtmlRequest' is set
        if (createPdfFromHtmlRequest == null) {
            throw new ApiException("Missing the required parameter 'createPdfFromHtmlRequest' when calling createPdfFromHtml(Async)");
        }

        return createPdfFromHtmlCall(createPdfFromHtmlRequest, exportType, expiration, outputFormat, filename, imageResampleRes, isCmyk, cloudStorage, pdfStandard, postactionS3Filekey, postactionS3Bucket, meta, async, webhookUrl, _callback);

    }

    /**
     * Create a PDF from HTML
     * - This endpoint creates a PDF file from HTML with JSON data 
     * @param createPdfFromHtmlRequest  (required)
     * @param exportType - Either &#x60;file&#x60; or &#x60;json&#x60;(Default).   - The option &#x60;json&#x60; returns a JSON object, and the output PDF is stored on a CDN. Use this with the parameter &#x60;expiration&#x60;   - The option &#x60;file&#x60; returns binary data of the generated PDF(Secure and completely private) and the response HTTP header Content-Disposition is set to attachment.  (optional)
     * @param expiration - Expiration of the generated PDF in minutes(default to &#x60;0&#x60;, store permanently)   - Use &#x60;0&#x60; to store on cdn permanently   - Or use the range between &#x60;1&#x60; minute and &#x60;10080&#x60; minutes(7 days) to specify the expiration of the generated PDF  (optional)
     * @param outputFormat - Either &#x60;pdf&#x60;(Default) or &#x60;html&#x60;. - It&#39;s generating PDF by default. However, you can specify output_format&#x3D;html to generate only HTML(It will return in the JSON response as download_url field as a URL).  (optional)
     * @param filename - Default to UUID (e.g 0c93bd9e-9ebb-4634-a70f-de9131848416.pdf). Use this to specify custom file name, it should end with &#x60;.pdf&#x60;  (optional)
     * @param imageResampleRes - We embed the original images by default, meaning large PDF file sizes. Specifying the option &#39;image_resample_res&#39; helps reduce the PDF file size by downsampling the images of the current PDF to a resolution(in DPI). Common values are 72, 96, 150, 300 and 600.  (optional)
     * @param isCmyk - Use CMYK color profile, 1&#x3D;true, 0&#x3D;false. Default to &#39;0&#39;  (optional)
     * @param cloudStorage - Upload the generated PDFs/images to our storage CDN, default to &#x60;1&#x60;. If you have configured &#x60;Post Action&#x60; to upload the PDFs/Images to your own S3, please set it to &#x60;0&#x60;.  (optional)
     * @param pdfStandard Default to PDF1.4. Options are PDFA1B, PDFA2 and PDFA3 (This is an experimental feature)  (optional)
     * @param postactionS3Filekey - This is to specify the file name for &#x60;Post Action(S3 Storage)&#x60;. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter  (optional)
     * @param postactionS3Bucket - This is to overwrite the AWS Bucket for &#x60;Post Action(S3 Storage)&#x60;.  (optional)
     * @param meta - Specify an external reference ID for your own reference. It appears in the &#x60;list-objects&#x60; API.  (optional)
     * @param async - Either &#x60;1&#x60; or &#x60;0&#x60;(Default).  &#x60;0&#x60; is synchronous call(default), &#x60;1&#x60; is asynchronous call - To generate PDF asynchronously, set the value to &#x60;1&#x60; and the API call returns immediately. Once the PDF document is generated, we will make a HTTP/HTTPS GET to your URL(webhook_url) and will retry for 3 times before giving up. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then &#x60;webhook_url&#x60; is mandatory  (optional)
     * @param webhookUrl - It is the URL of your webhook URL, it starts with http:// or https:// and has to be urlencoded. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then you have to specify the &#x60;webhook_url&#x60;.   #### Format of Webhook callback  Once the PDF is generated, we will initiate a HTTP/HTTPS GET call to the following URL:  https://&#x60;[yourwebserver.com]&#x60;?&amp;primary_url&#x3D;&#x60;[primary_url]&#x60;&amp;transaction_ref&#x3D;&#x60;[transaction_ref]&#x60;&amp;status&#x3D;&#x60;[status]&#x60;&amp;message&#x3D;&#x60;[message]&#x60;  - &#x60;[yourwebserver.com]&#x60;: The web services to handle the callback, which is the &#x60;webhook_url&#x60; - &#x60;[primary_url]&#x60;: The URL to the PDF document - &#x60;[transaction_ref]&#x60;: The transaction reference number - &#x60;[status]&#x60; : Status of the transaction, either &#x60;success&#x60; or &#x60;error&#x60; - &#x60;[message]&#x60; : Status message  ***The following is a sample webhook call back to your server***  https://yourwebserver.com?&amp;primary_url&#x3D;https%3A%2F%2Fpub-cdn.apitemplate.io%2F2021%2F06%2Fb692183d-46d7-3213-891a-460a5814ad3f.pdf&amp;transaction_ref&#x3D;b692183d-46d7-3213-891a-460a5814ad3f&amp;status&#x3D;success  (optional)
     * @return ResponseSuccessPDFFile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns status and output file </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseSuccessPDFFile createPdfFromHtml(CreatePdfFromHtmlRequest createPdfFromHtmlRequest, String exportType, Integer expiration, String outputFormat, String filename, String imageResampleRes, String isCmyk, Integer cloudStorage, String pdfStandard, String postactionS3Filekey, String postactionS3Bucket, String meta, String async, String webhookUrl) throws ApiException {
        ApiResponse<ResponseSuccessPDFFile> localVarResp = createPdfFromHtmlWithHttpInfo(createPdfFromHtmlRequest, exportType, expiration, outputFormat, filename, imageResampleRes, isCmyk, cloudStorage, pdfStandard, postactionS3Filekey, postactionS3Bucket, meta, async, webhookUrl);
        return localVarResp.getData();
    }

    /**
     * Create a PDF from HTML
     * - This endpoint creates a PDF file from HTML with JSON data 
     * @param createPdfFromHtmlRequest  (required)
     * @param exportType - Either &#x60;file&#x60; or &#x60;json&#x60;(Default).   - The option &#x60;json&#x60; returns a JSON object, and the output PDF is stored on a CDN. Use this with the parameter &#x60;expiration&#x60;   - The option &#x60;file&#x60; returns binary data of the generated PDF(Secure and completely private) and the response HTTP header Content-Disposition is set to attachment.  (optional)
     * @param expiration - Expiration of the generated PDF in minutes(default to &#x60;0&#x60;, store permanently)   - Use &#x60;0&#x60; to store on cdn permanently   - Or use the range between &#x60;1&#x60; minute and &#x60;10080&#x60; minutes(7 days) to specify the expiration of the generated PDF  (optional)
     * @param outputFormat - Either &#x60;pdf&#x60;(Default) or &#x60;html&#x60;. - It&#39;s generating PDF by default. However, you can specify output_format&#x3D;html to generate only HTML(It will return in the JSON response as download_url field as a URL).  (optional)
     * @param filename - Default to UUID (e.g 0c93bd9e-9ebb-4634-a70f-de9131848416.pdf). Use this to specify custom file name, it should end with &#x60;.pdf&#x60;  (optional)
     * @param imageResampleRes - We embed the original images by default, meaning large PDF file sizes. Specifying the option &#39;image_resample_res&#39; helps reduce the PDF file size by downsampling the images of the current PDF to a resolution(in DPI). Common values are 72, 96, 150, 300 and 600.  (optional)
     * @param isCmyk - Use CMYK color profile, 1&#x3D;true, 0&#x3D;false. Default to &#39;0&#39;  (optional)
     * @param cloudStorage - Upload the generated PDFs/images to our storage CDN, default to &#x60;1&#x60;. If you have configured &#x60;Post Action&#x60; to upload the PDFs/Images to your own S3, please set it to &#x60;0&#x60;.  (optional)
     * @param pdfStandard Default to PDF1.4. Options are PDFA1B, PDFA2 and PDFA3 (This is an experimental feature)  (optional)
     * @param postactionS3Filekey - This is to specify the file name for &#x60;Post Action(S3 Storage)&#x60;. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter  (optional)
     * @param postactionS3Bucket - This is to overwrite the AWS Bucket for &#x60;Post Action(S3 Storage)&#x60;.  (optional)
     * @param meta - Specify an external reference ID for your own reference. It appears in the &#x60;list-objects&#x60; API.  (optional)
     * @param async - Either &#x60;1&#x60; or &#x60;0&#x60;(Default).  &#x60;0&#x60; is synchronous call(default), &#x60;1&#x60; is asynchronous call - To generate PDF asynchronously, set the value to &#x60;1&#x60; and the API call returns immediately. Once the PDF document is generated, we will make a HTTP/HTTPS GET to your URL(webhook_url) and will retry for 3 times before giving up. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then &#x60;webhook_url&#x60; is mandatory  (optional)
     * @param webhookUrl - It is the URL of your webhook URL, it starts with http:// or https:// and has to be urlencoded. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then you have to specify the &#x60;webhook_url&#x60;.   #### Format of Webhook callback  Once the PDF is generated, we will initiate a HTTP/HTTPS GET call to the following URL:  https://&#x60;[yourwebserver.com]&#x60;?&amp;primary_url&#x3D;&#x60;[primary_url]&#x60;&amp;transaction_ref&#x3D;&#x60;[transaction_ref]&#x60;&amp;status&#x3D;&#x60;[status]&#x60;&amp;message&#x3D;&#x60;[message]&#x60;  - &#x60;[yourwebserver.com]&#x60;: The web services to handle the callback, which is the &#x60;webhook_url&#x60; - &#x60;[primary_url]&#x60;: The URL to the PDF document - &#x60;[transaction_ref]&#x60;: The transaction reference number - &#x60;[status]&#x60; : Status of the transaction, either &#x60;success&#x60; or &#x60;error&#x60; - &#x60;[message]&#x60; : Status message  ***The following is a sample webhook call back to your server***  https://yourwebserver.com?&amp;primary_url&#x3D;https%3A%2F%2Fpub-cdn.apitemplate.io%2F2021%2F06%2Fb692183d-46d7-3213-891a-460a5814ad3f.pdf&amp;transaction_ref&#x3D;b692183d-46d7-3213-891a-460a5814ad3f&amp;status&#x3D;success  (optional)
     * @return ApiResponse&lt;ResponseSuccessPDFFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns status and output file </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseSuccessPDFFile> createPdfFromHtmlWithHttpInfo(CreatePdfFromHtmlRequest createPdfFromHtmlRequest, String exportType, Integer expiration, String outputFormat, String filename, String imageResampleRes, String isCmyk, Integer cloudStorage, String pdfStandard, String postactionS3Filekey, String postactionS3Bucket, String meta, String async, String webhookUrl) throws ApiException {
        okhttp3.Call localVarCall = createPdfFromHtmlValidateBeforeCall(createPdfFromHtmlRequest, exportType, expiration, outputFormat, filename, imageResampleRes, isCmyk, cloudStorage, pdfStandard, postactionS3Filekey, postactionS3Bucket, meta, async, webhookUrl, null);
        Type localVarReturnType = new TypeToken<ResponseSuccessPDFFile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a PDF from HTML (asynchronously)
     * - This endpoint creates a PDF file from HTML with JSON data 
     * @param createPdfFromHtmlRequest  (required)
     * @param exportType - Either &#x60;file&#x60; or &#x60;json&#x60;(Default).   - The option &#x60;json&#x60; returns a JSON object, and the output PDF is stored on a CDN. Use this with the parameter &#x60;expiration&#x60;   - The option &#x60;file&#x60; returns binary data of the generated PDF(Secure and completely private) and the response HTTP header Content-Disposition is set to attachment.  (optional)
     * @param expiration - Expiration of the generated PDF in minutes(default to &#x60;0&#x60;, store permanently)   - Use &#x60;0&#x60; to store on cdn permanently   - Or use the range between &#x60;1&#x60; minute and &#x60;10080&#x60; minutes(7 days) to specify the expiration of the generated PDF  (optional)
     * @param outputFormat - Either &#x60;pdf&#x60;(Default) or &#x60;html&#x60;. - It&#39;s generating PDF by default. However, you can specify output_format&#x3D;html to generate only HTML(It will return in the JSON response as download_url field as a URL).  (optional)
     * @param filename - Default to UUID (e.g 0c93bd9e-9ebb-4634-a70f-de9131848416.pdf). Use this to specify custom file name, it should end with &#x60;.pdf&#x60;  (optional)
     * @param imageResampleRes - We embed the original images by default, meaning large PDF file sizes. Specifying the option &#39;image_resample_res&#39; helps reduce the PDF file size by downsampling the images of the current PDF to a resolution(in DPI). Common values are 72, 96, 150, 300 and 600.  (optional)
     * @param isCmyk - Use CMYK color profile, 1&#x3D;true, 0&#x3D;false. Default to &#39;0&#39;  (optional)
     * @param cloudStorage - Upload the generated PDFs/images to our storage CDN, default to &#x60;1&#x60;. If you have configured &#x60;Post Action&#x60; to upload the PDFs/Images to your own S3, please set it to &#x60;0&#x60;.  (optional)
     * @param pdfStandard Default to PDF1.4. Options are PDFA1B, PDFA2 and PDFA3 (This is an experimental feature)  (optional)
     * @param postactionS3Filekey - This is to specify the file name for &#x60;Post Action(S3 Storage)&#x60;. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter  (optional)
     * @param postactionS3Bucket - This is to overwrite the AWS Bucket for &#x60;Post Action(S3 Storage)&#x60;.  (optional)
     * @param meta - Specify an external reference ID for your own reference. It appears in the &#x60;list-objects&#x60; API.  (optional)
     * @param async - Either &#x60;1&#x60; or &#x60;0&#x60;(Default).  &#x60;0&#x60; is synchronous call(default), &#x60;1&#x60; is asynchronous call - To generate PDF asynchronously, set the value to &#x60;1&#x60; and the API call returns immediately. Once the PDF document is generated, we will make a HTTP/HTTPS GET to your URL(webhook_url) and will retry for 3 times before giving up. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then &#x60;webhook_url&#x60; is mandatory  (optional)
     * @param webhookUrl - It is the URL of your webhook URL, it starts with http:// or https:// and has to be urlencoded. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then you have to specify the &#x60;webhook_url&#x60;.   #### Format of Webhook callback  Once the PDF is generated, we will initiate a HTTP/HTTPS GET call to the following URL:  https://&#x60;[yourwebserver.com]&#x60;?&amp;primary_url&#x3D;&#x60;[primary_url]&#x60;&amp;transaction_ref&#x3D;&#x60;[transaction_ref]&#x60;&amp;status&#x3D;&#x60;[status]&#x60;&amp;message&#x3D;&#x60;[message]&#x60;  - &#x60;[yourwebserver.com]&#x60;: The web services to handle the callback, which is the &#x60;webhook_url&#x60; - &#x60;[primary_url]&#x60;: The URL to the PDF document - &#x60;[transaction_ref]&#x60;: The transaction reference number - &#x60;[status]&#x60; : Status of the transaction, either &#x60;success&#x60; or &#x60;error&#x60; - &#x60;[message]&#x60; : Status message  ***The following is a sample webhook call back to your server***  https://yourwebserver.com?&amp;primary_url&#x3D;https%3A%2F%2Fpub-cdn.apitemplate.io%2F2021%2F06%2Fb692183d-46d7-3213-891a-460a5814ad3f.pdf&amp;transaction_ref&#x3D;b692183d-46d7-3213-891a-460a5814ad3f&amp;status&#x3D;success  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns status and output file </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPdfFromHtmlAsync(CreatePdfFromHtmlRequest createPdfFromHtmlRequest, String exportType, Integer expiration, String outputFormat, String filename, String imageResampleRes, String isCmyk, Integer cloudStorage, String pdfStandard, String postactionS3Filekey, String postactionS3Bucket, String meta, String async, String webhookUrl, final ApiCallback<ResponseSuccessPDFFile> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPdfFromHtmlValidateBeforeCall(createPdfFromHtmlRequest, exportType, expiration, outputFormat, filename, imageResampleRes, isCmyk, cloudStorage, pdfStandard, postactionS3Filekey, postactionS3Bucket, meta, async, webhookUrl, _callback);
        Type localVarReturnType = new TypeToken<ResponseSuccessPDFFile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPdfFromUrl
     * @param createPdfFromUrlRequest  (required)
     * @param exportType - Either &#x60;file&#x60; or &#x60;json&#x60;(Default).   - The option &#x60;json&#x60; returns a JSON object, and the output PDF is stored on a CDN. Use this with the parameter &#x60;expiration&#x60;   - The option &#x60;file&#x60; returns binary data of the generated PDF(Secure and completely private) and the response HTTP header Content-Disposition is set to attachment.  (optional)
     * @param expiration - Expiration of the generated PDF in minutes(default to &#x60;0&#x60;, store permanently)   - Use &#x60;0&#x60; to store on cdn permanently   - Or use the range between &#x60;1&#x60; minute and &#x60;10080&#x60; minutes(7 days) to specify the expiration of the generated PDF  (optional)
     * @param outputFormat - Either &#x60;pdf&#x60;(Default) or &#x60;html&#x60;. - It&#39;s generating PDF by default. However, you can specify output_format&#x3D;html to generate only HTML(It will return in the JSON response as download_url field as a URL).  (optional)
     * @param filename - Default to UUID (e.g 0c93bd9e-9ebb-4634-a70f-de9131848416.pdf). Use this to specify custom file name, it should end with &#x60;.pdf&#x60;  (optional)
     * @param imageResampleRes - We embed the original images by default, meaning large PDF file sizes. Specifying the option &#39;image_resample_res&#39; helps reduce the PDF file size by downsampling the images of the current PDF to a resolution(in DPI). Common values are 72, 96, 150, 300 and 600.  (optional)
     * @param isCmyk - Use CMYK color profile, 1&#x3D;true, 0&#x3D;false. Default to &#39;0&#39;  (optional)
     * @param cloudStorage - Upload the generated PDFs/images to our storage CDN, default to &#x60;1&#x60;. If you have configured &#x60;Post Action&#x60; to upload the PDFs/Images to your own S3, please set it to &#x60;0&#x60;.  (optional)
     * @param pdfStandard Default to PDF1.4. Options are PDFA1B, PDFA2 and PDFA3 (This is an experimental feature)  (optional)
     * @param postactionS3Filekey - This is to specify the file name for &#x60;Post Action(S3 Storage)&#x60;. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter  (optional)
     * @param postactionS3Bucket - This is to overwrite the AWS Bucket for &#x60;Post Action(S3 Storage)&#x60;.  (optional)
     * @param meta - Specify an external reference ID for your own reference. It appears in the &#x60;list-objects&#x60; API.  (optional)
     * @param async - Either &#x60;1&#x60; or &#x60;0&#x60;(Default).  &#x60;0&#x60; is synchronous call(default), &#x60;1&#x60; is asynchronous call - To generate PDF asynchronously, set the value to &#x60;1&#x60; and the API call returns immediately. Once the PDF document is generated, we will make a HTTP/HTTPS GET to your URL(webhook_url) and will retry for 3 times before giving up. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then &#x60;webhook_url&#x60; is mandatory  (optional)
     * @param webhookUrl - It is the URL of your webhook URL, it starts with http:// or https:// and has to be urlencoded. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then you have to specify the &#x60;webhook_url&#x60;.   #### Format of Webhook callback  Once the PDF is generated, we will initiate a HTTP/HTTPS GET call to the following URL:  https://&#x60;[yourwebserver.com]&#x60;?&amp;primary_url&#x3D;&#x60;[primary_url]&#x60;&amp;transaction_ref&#x3D;&#x60;[transaction_ref]&#x60;&amp;status&#x3D;&#x60;[status]&#x60;&amp;message&#x3D;&#x60;[message]&#x60;  - &#x60;[yourwebserver.com]&#x60;: The web services to handle the callback, which is the &#x60;webhook_url&#x60; - &#x60;[primary_url]&#x60;: The URL to the PDF document - &#x60;[transaction_ref]&#x60;: The transaction reference number - &#x60;[status]&#x60; : Status of the transaction, either &#x60;success&#x60; or &#x60;error&#x60; - &#x60;[message]&#x60; : Status message  ***The following is a sample webhook call back to your server***  https://yourwebserver.com?&amp;primary_url&#x3D;https%3A%2F%2Fpub-cdn.apitemplate.io%2F2021%2F06%2Fb692183d-46d7-3213-891a-460a5814ad3f.pdf&amp;transaction_ref&#x3D;b692183d-46d7-3213-891a-460a5814ad3f&amp;status&#x3D;success  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns status and output file </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPdfFromUrlCall(CreatePdfFromUrlRequest createPdfFromUrlRequest, String exportType, Integer expiration, String outputFormat, String filename, String imageResampleRes, String isCmyk, Integer cloudStorage, String pdfStandard, String postactionS3Filekey, String postactionS3Bucket, String meta, String async, String webhookUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createPdfFromUrlRequest;

        // create path and map variables
        String localVarPath = "/v2/create-pdf-from-url";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (exportType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("export_type", exportType));
        }

        if (expiration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expiration", expiration));
        }

        if (outputFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("output_format", outputFormat));
        }

        if (filename != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filename", filename));
        }

        if (imageResampleRes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("image_resample_res", imageResampleRes));
        }

        if (isCmyk != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_cmyk", isCmyk));
        }

        if (cloudStorage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cloud_storage", cloudStorage));
        }

        if (pdfStandard != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pdf_standard", pdfStandard));
        }

        if (postactionS3Filekey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("postaction_s3_filekey", postactionS3Filekey));
        }

        if (postactionS3Bucket != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("postaction_s3_bucket", postactionS3Bucket));
        }

        if (meta != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("meta", meta));
        }

        if (async != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("async", async));
        }

        if (webhookUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webhook_url", webhookUrl));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPdfFromUrlValidateBeforeCall(CreatePdfFromUrlRequest createPdfFromUrlRequest, String exportType, Integer expiration, String outputFormat, String filename, String imageResampleRes, String isCmyk, Integer cloudStorage, String pdfStandard, String postactionS3Filekey, String postactionS3Bucket, String meta, String async, String webhookUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createPdfFromUrlRequest' is set
        if (createPdfFromUrlRequest == null) {
            throw new ApiException("Missing the required parameter 'createPdfFromUrlRequest' when calling createPdfFromUrl(Async)");
        }

        return createPdfFromUrlCall(createPdfFromUrlRequest, exportType, expiration, outputFormat, filename, imageResampleRes, isCmyk, cloudStorage, pdfStandard, postactionS3Filekey, postactionS3Bucket, meta, async, webhookUrl, _callback);

    }

    /**
     * Create a PDF from URL
     * - This endpoint creates a PDF file from a URL 
     * @param createPdfFromUrlRequest  (required)
     * @param exportType - Either &#x60;file&#x60; or &#x60;json&#x60;(Default).   - The option &#x60;json&#x60; returns a JSON object, and the output PDF is stored on a CDN. Use this with the parameter &#x60;expiration&#x60;   - The option &#x60;file&#x60; returns binary data of the generated PDF(Secure and completely private) and the response HTTP header Content-Disposition is set to attachment.  (optional)
     * @param expiration - Expiration of the generated PDF in minutes(default to &#x60;0&#x60;, store permanently)   - Use &#x60;0&#x60; to store on cdn permanently   - Or use the range between &#x60;1&#x60; minute and &#x60;10080&#x60; minutes(7 days) to specify the expiration of the generated PDF  (optional)
     * @param outputFormat - Either &#x60;pdf&#x60;(Default) or &#x60;html&#x60;. - It&#39;s generating PDF by default. However, you can specify output_format&#x3D;html to generate only HTML(It will return in the JSON response as download_url field as a URL).  (optional)
     * @param filename - Default to UUID (e.g 0c93bd9e-9ebb-4634-a70f-de9131848416.pdf). Use this to specify custom file name, it should end with &#x60;.pdf&#x60;  (optional)
     * @param imageResampleRes - We embed the original images by default, meaning large PDF file sizes. Specifying the option &#39;image_resample_res&#39; helps reduce the PDF file size by downsampling the images of the current PDF to a resolution(in DPI). Common values are 72, 96, 150, 300 and 600.  (optional)
     * @param isCmyk - Use CMYK color profile, 1&#x3D;true, 0&#x3D;false. Default to &#39;0&#39;  (optional)
     * @param cloudStorage - Upload the generated PDFs/images to our storage CDN, default to &#x60;1&#x60;. If you have configured &#x60;Post Action&#x60; to upload the PDFs/Images to your own S3, please set it to &#x60;0&#x60;.  (optional)
     * @param pdfStandard Default to PDF1.4. Options are PDFA1B, PDFA2 and PDFA3 (This is an experimental feature)  (optional)
     * @param postactionS3Filekey - This is to specify the file name for &#x60;Post Action(S3 Storage)&#x60;. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter  (optional)
     * @param postactionS3Bucket - This is to overwrite the AWS Bucket for &#x60;Post Action(S3 Storage)&#x60;.  (optional)
     * @param meta - Specify an external reference ID for your own reference. It appears in the &#x60;list-objects&#x60; API.  (optional)
     * @param async - Either &#x60;1&#x60; or &#x60;0&#x60;(Default).  &#x60;0&#x60; is synchronous call(default), &#x60;1&#x60; is asynchronous call - To generate PDF asynchronously, set the value to &#x60;1&#x60; and the API call returns immediately. Once the PDF document is generated, we will make a HTTP/HTTPS GET to your URL(webhook_url) and will retry for 3 times before giving up. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then &#x60;webhook_url&#x60; is mandatory  (optional)
     * @param webhookUrl - It is the URL of your webhook URL, it starts with http:// or https:// and has to be urlencoded. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then you have to specify the &#x60;webhook_url&#x60;.   #### Format of Webhook callback  Once the PDF is generated, we will initiate a HTTP/HTTPS GET call to the following URL:  https://&#x60;[yourwebserver.com]&#x60;?&amp;primary_url&#x3D;&#x60;[primary_url]&#x60;&amp;transaction_ref&#x3D;&#x60;[transaction_ref]&#x60;&amp;status&#x3D;&#x60;[status]&#x60;&amp;message&#x3D;&#x60;[message]&#x60;  - &#x60;[yourwebserver.com]&#x60;: The web services to handle the callback, which is the &#x60;webhook_url&#x60; - &#x60;[primary_url]&#x60;: The URL to the PDF document - &#x60;[transaction_ref]&#x60;: The transaction reference number - &#x60;[status]&#x60; : Status of the transaction, either &#x60;success&#x60; or &#x60;error&#x60; - &#x60;[message]&#x60; : Status message  ***The following is a sample webhook call back to your server***  https://yourwebserver.com?&amp;primary_url&#x3D;https%3A%2F%2Fpub-cdn.apitemplate.io%2F2021%2F06%2Fb692183d-46d7-3213-891a-460a5814ad3f.pdf&amp;transaction_ref&#x3D;b692183d-46d7-3213-891a-460a5814ad3f&amp;status&#x3D;success  (optional)
     * @return ResponseSuccessPDFFile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns status and output file </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseSuccessPDFFile createPdfFromUrl(CreatePdfFromUrlRequest createPdfFromUrlRequest, String exportType, Integer expiration, String outputFormat, String filename, String imageResampleRes, String isCmyk, Integer cloudStorage, String pdfStandard, String postactionS3Filekey, String postactionS3Bucket, String meta, String async, String webhookUrl) throws ApiException {
        ApiResponse<ResponseSuccessPDFFile> localVarResp = createPdfFromUrlWithHttpInfo(createPdfFromUrlRequest, exportType, expiration, outputFormat, filename, imageResampleRes, isCmyk, cloudStorage, pdfStandard, postactionS3Filekey, postactionS3Bucket, meta, async, webhookUrl);
        return localVarResp.getData();
    }

    /**
     * Create a PDF from URL
     * - This endpoint creates a PDF file from a URL 
     * @param createPdfFromUrlRequest  (required)
     * @param exportType - Either &#x60;file&#x60; or &#x60;json&#x60;(Default).   - The option &#x60;json&#x60; returns a JSON object, and the output PDF is stored on a CDN. Use this with the parameter &#x60;expiration&#x60;   - The option &#x60;file&#x60; returns binary data of the generated PDF(Secure and completely private) and the response HTTP header Content-Disposition is set to attachment.  (optional)
     * @param expiration - Expiration of the generated PDF in minutes(default to &#x60;0&#x60;, store permanently)   - Use &#x60;0&#x60; to store on cdn permanently   - Or use the range between &#x60;1&#x60; minute and &#x60;10080&#x60; minutes(7 days) to specify the expiration of the generated PDF  (optional)
     * @param outputFormat - Either &#x60;pdf&#x60;(Default) or &#x60;html&#x60;. - It&#39;s generating PDF by default. However, you can specify output_format&#x3D;html to generate only HTML(It will return in the JSON response as download_url field as a URL).  (optional)
     * @param filename - Default to UUID (e.g 0c93bd9e-9ebb-4634-a70f-de9131848416.pdf). Use this to specify custom file name, it should end with &#x60;.pdf&#x60;  (optional)
     * @param imageResampleRes - We embed the original images by default, meaning large PDF file sizes. Specifying the option &#39;image_resample_res&#39; helps reduce the PDF file size by downsampling the images of the current PDF to a resolution(in DPI). Common values are 72, 96, 150, 300 and 600.  (optional)
     * @param isCmyk - Use CMYK color profile, 1&#x3D;true, 0&#x3D;false. Default to &#39;0&#39;  (optional)
     * @param cloudStorage - Upload the generated PDFs/images to our storage CDN, default to &#x60;1&#x60;. If you have configured &#x60;Post Action&#x60; to upload the PDFs/Images to your own S3, please set it to &#x60;0&#x60;.  (optional)
     * @param pdfStandard Default to PDF1.4. Options are PDFA1B, PDFA2 and PDFA3 (This is an experimental feature)  (optional)
     * @param postactionS3Filekey - This is to specify the file name for &#x60;Post Action(S3 Storage)&#x60;. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter  (optional)
     * @param postactionS3Bucket - This is to overwrite the AWS Bucket for &#x60;Post Action(S3 Storage)&#x60;.  (optional)
     * @param meta - Specify an external reference ID for your own reference. It appears in the &#x60;list-objects&#x60; API.  (optional)
     * @param async - Either &#x60;1&#x60; or &#x60;0&#x60;(Default).  &#x60;0&#x60; is synchronous call(default), &#x60;1&#x60; is asynchronous call - To generate PDF asynchronously, set the value to &#x60;1&#x60; and the API call returns immediately. Once the PDF document is generated, we will make a HTTP/HTTPS GET to your URL(webhook_url) and will retry for 3 times before giving up. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then &#x60;webhook_url&#x60; is mandatory  (optional)
     * @param webhookUrl - It is the URL of your webhook URL, it starts with http:// or https:// and has to be urlencoded. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then you have to specify the &#x60;webhook_url&#x60;.   #### Format of Webhook callback  Once the PDF is generated, we will initiate a HTTP/HTTPS GET call to the following URL:  https://&#x60;[yourwebserver.com]&#x60;?&amp;primary_url&#x3D;&#x60;[primary_url]&#x60;&amp;transaction_ref&#x3D;&#x60;[transaction_ref]&#x60;&amp;status&#x3D;&#x60;[status]&#x60;&amp;message&#x3D;&#x60;[message]&#x60;  - &#x60;[yourwebserver.com]&#x60;: The web services to handle the callback, which is the &#x60;webhook_url&#x60; - &#x60;[primary_url]&#x60;: The URL to the PDF document - &#x60;[transaction_ref]&#x60;: The transaction reference number - &#x60;[status]&#x60; : Status of the transaction, either &#x60;success&#x60; or &#x60;error&#x60; - &#x60;[message]&#x60; : Status message  ***The following is a sample webhook call back to your server***  https://yourwebserver.com?&amp;primary_url&#x3D;https%3A%2F%2Fpub-cdn.apitemplate.io%2F2021%2F06%2Fb692183d-46d7-3213-891a-460a5814ad3f.pdf&amp;transaction_ref&#x3D;b692183d-46d7-3213-891a-460a5814ad3f&amp;status&#x3D;success  (optional)
     * @return ApiResponse&lt;ResponseSuccessPDFFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns status and output file </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseSuccessPDFFile> createPdfFromUrlWithHttpInfo(CreatePdfFromUrlRequest createPdfFromUrlRequest, String exportType, Integer expiration, String outputFormat, String filename, String imageResampleRes, String isCmyk, Integer cloudStorage, String pdfStandard, String postactionS3Filekey, String postactionS3Bucket, String meta, String async, String webhookUrl) throws ApiException {
        okhttp3.Call localVarCall = createPdfFromUrlValidateBeforeCall(createPdfFromUrlRequest, exportType, expiration, outputFormat, filename, imageResampleRes, isCmyk, cloudStorage, pdfStandard, postactionS3Filekey, postactionS3Bucket, meta, async, webhookUrl, null);
        Type localVarReturnType = new TypeToken<ResponseSuccessPDFFile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a PDF from URL (asynchronously)
     * - This endpoint creates a PDF file from a URL 
     * @param createPdfFromUrlRequest  (required)
     * @param exportType - Either &#x60;file&#x60; or &#x60;json&#x60;(Default).   - The option &#x60;json&#x60; returns a JSON object, and the output PDF is stored on a CDN. Use this with the parameter &#x60;expiration&#x60;   - The option &#x60;file&#x60; returns binary data of the generated PDF(Secure and completely private) and the response HTTP header Content-Disposition is set to attachment.  (optional)
     * @param expiration - Expiration of the generated PDF in minutes(default to &#x60;0&#x60;, store permanently)   - Use &#x60;0&#x60; to store on cdn permanently   - Or use the range between &#x60;1&#x60; minute and &#x60;10080&#x60; minutes(7 days) to specify the expiration of the generated PDF  (optional)
     * @param outputFormat - Either &#x60;pdf&#x60;(Default) or &#x60;html&#x60;. - It&#39;s generating PDF by default. However, you can specify output_format&#x3D;html to generate only HTML(It will return in the JSON response as download_url field as a URL).  (optional)
     * @param filename - Default to UUID (e.g 0c93bd9e-9ebb-4634-a70f-de9131848416.pdf). Use this to specify custom file name, it should end with &#x60;.pdf&#x60;  (optional)
     * @param imageResampleRes - We embed the original images by default, meaning large PDF file sizes. Specifying the option &#39;image_resample_res&#39; helps reduce the PDF file size by downsampling the images of the current PDF to a resolution(in DPI). Common values are 72, 96, 150, 300 and 600.  (optional)
     * @param isCmyk - Use CMYK color profile, 1&#x3D;true, 0&#x3D;false. Default to &#39;0&#39;  (optional)
     * @param cloudStorage - Upload the generated PDFs/images to our storage CDN, default to &#x60;1&#x60;. If you have configured &#x60;Post Action&#x60; to upload the PDFs/Images to your own S3, please set it to &#x60;0&#x60;.  (optional)
     * @param pdfStandard Default to PDF1.4. Options are PDFA1B, PDFA2 and PDFA3 (This is an experimental feature)  (optional)
     * @param postactionS3Filekey - This is to specify the file name for &#x60;Post Action(S3 Storage)&#x60;. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter  (optional)
     * @param postactionS3Bucket - This is to overwrite the AWS Bucket for &#x60;Post Action(S3 Storage)&#x60;.  (optional)
     * @param meta - Specify an external reference ID for your own reference. It appears in the &#x60;list-objects&#x60; API.  (optional)
     * @param async - Either &#x60;1&#x60; or &#x60;0&#x60;(Default).  &#x60;0&#x60; is synchronous call(default), &#x60;1&#x60; is asynchronous call - To generate PDF asynchronously, set the value to &#x60;1&#x60; and the API call returns immediately. Once the PDF document is generated, we will make a HTTP/HTTPS GET to your URL(webhook_url) and will retry for 3 times before giving up. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then &#x60;webhook_url&#x60; is mandatory  (optional)
     * @param webhookUrl - It is the URL of your webhook URL, it starts with http:// or https:// and has to be urlencoded. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then you have to specify the &#x60;webhook_url&#x60;.   #### Format of Webhook callback  Once the PDF is generated, we will initiate a HTTP/HTTPS GET call to the following URL:  https://&#x60;[yourwebserver.com]&#x60;?&amp;primary_url&#x3D;&#x60;[primary_url]&#x60;&amp;transaction_ref&#x3D;&#x60;[transaction_ref]&#x60;&amp;status&#x3D;&#x60;[status]&#x60;&amp;message&#x3D;&#x60;[message]&#x60;  - &#x60;[yourwebserver.com]&#x60;: The web services to handle the callback, which is the &#x60;webhook_url&#x60; - &#x60;[primary_url]&#x60;: The URL to the PDF document - &#x60;[transaction_ref]&#x60;: The transaction reference number - &#x60;[status]&#x60; : Status of the transaction, either &#x60;success&#x60; or &#x60;error&#x60; - &#x60;[message]&#x60; : Status message  ***The following is a sample webhook call back to your server***  https://yourwebserver.com?&amp;primary_url&#x3D;https%3A%2F%2Fpub-cdn.apitemplate.io%2F2021%2F06%2Fb692183d-46d7-3213-891a-460a5814ad3f.pdf&amp;transaction_ref&#x3D;b692183d-46d7-3213-891a-460a5814ad3f&amp;status&#x3D;success  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns status and output file </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPdfFromUrlAsync(CreatePdfFromUrlRequest createPdfFromUrlRequest, String exportType, Integer expiration, String outputFormat, String filename, String imageResampleRes, String isCmyk, Integer cloudStorage, String pdfStandard, String postactionS3Filekey, String postactionS3Bucket, String meta, String async, String webhookUrl, final ApiCallback<ResponseSuccessPDFFile> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPdfFromUrlValidateBeforeCall(createPdfFromUrlRequest, exportType, expiration, outputFormat, filename, imageResampleRes, isCmyk, cloudStorage, pdfStandard, postactionS3Filekey, postactionS3Bucket, meta, async, webhookUrl, _callback);
        Type localVarReturnType = new TypeToken<ResponseSuccessPDFFile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteObject
     * @param transactionRef Object transaction reference (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns status and output file </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteObjectCall(String transactionRef, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/delete-object";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (transactionRef != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transaction_ref", transactionRef));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteObjectValidateBeforeCall(String transactionRef, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transactionRef' is set
        if (transactionRef == null) {
            throw new ApiException("Missing the required parameter 'transactionRef' when calling deleteObject(Async)");
        }

        return deleteObjectCall(transactionRef, _callback);

    }

    /**
     * Delete an Object
     * Delete a PDF or an image from CDN and mark the transaction as deleted 
     * @param transactionRef Object transaction reference (required)
     * @return ResponseSuccessDeleteObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns status and output file </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseSuccessDeleteObject deleteObject(String transactionRef) throws ApiException {
        ApiResponse<ResponseSuccessDeleteObject> localVarResp = deleteObjectWithHttpInfo(transactionRef);
        return localVarResp.getData();
    }

    /**
     * Delete an Object
     * Delete a PDF or an image from CDN and mark the transaction as deleted 
     * @param transactionRef Object transaction reference (required)
     * @return ApiResponse&lt;ResponseSuccessDeleteObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns status and output file </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseSuccessDeleteObject> deleteObjectWithHttpInfo(String transactionRef) throws ApiException {
        okhttp3.Call localVarCall = deleteObjectValidateBeforeCall(transactionRef, null);
        Type localVarReturnType = new TypeToken<ResponseSuccessDeleteObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an Object (asynchronously)
     * Delete a PDF or an image from CDN and mark the transaction as deleted 
     * @param transactionRef Object transaction reference (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns status and output file </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteObjectAsync(String transactionRef, final ApiCallback<ResponseSuccessDeleteObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteObjectValidateBeforeCall(transactionRef, _callback);
        Type localVarReturnType = new TypeToken<ResponseSuccessDeleteObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listObjects
     * @param limit Retrieve only the number of records specified. Default to 300 (optional)
     * @param offset Offset is used to skip the number of records from the results. Default to 0 (optional)
     * @param templateId Filtered by template id (optional)
     * @param transactionType Filtered by transaction type, options are &#x60;PDF&#x60;, &#x60;JPEG&#x60; or &#x60;MERGE&#x60; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns status and output file </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listObjectsCall(String limit, String offset, String templateId, String transactionType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/list-objects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (templateId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("template_id", templateId));
        }

        if (transactionType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transaction_type", transactionType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listObjectsValidateBeforeCall(String limit, String offset, String templateId, String transactionType, final ApiCallback _callback) throws ApiException {
        return listObjectsCall(limit, offset, templateId, transactionType, _callback);

    }

    /**
     * List Generated Objects
     * Retrieves all the generated PDFs and images 
     * @param limit Retrieve only the number of records specified. Default to 300 (optional)
     * @param offset Offset is used to skip the number of records from the results. Default to 0 (optional)
     * @param templateId Filtered by template id (optional)
     * @param transactionType Filtered by transaction type, options are &#x60;PDF&#x60;, &#x60;JPEG&#x60; or &#x60;MERGE&#x60; (optional)
     * @return ResponseSuccessListObjects
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns status and output file </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseSuccessListObjects listObjects(String limit, String offset, String templateId, String transactionType) throws ApiException {
        ApiResponse<ResponseSuccessListObjects> localVarResp = listObjectsWithHttpInfo(limit, offset, templateId, transactionType);
        return localVarResp.getData();
    }

    /**
     * List Generated Objects
     * Retrieves all the generated PDFs and images 
     * @param limit Retrieve only the number of records specified. Default to 300 (optional)
     * @param offset Offset is used to skip the number of records from the results. Default to 0 (optional)
     * @param templateId Filtered by template id (optional)
     * @param transactionType Filtered by transaction type, options are &#x60;PDF&#x60;, &#x60;JPEG&#x60; or &#x60;MERGE&#x60; (optional)
     * @return ApiResponse&lt;ResponseSuccessListObjects&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns status and output file </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseSuccessListObjects> listObjectsWithHttpInfo(String limit, String offset, String templateId, String transactionType) throws ApiException {
        okhttp3.Call localVarCall = listObjectsValidateBeforeCall(limit, offset, templateId, transactionType, null);
        Type localVarReturnType = new TypeToken<ResponseSuccessListObjects>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Generated Objects (asynchronously)
     * Retrieves all the generated PDFs and images 
     * @param limit Retrieve only the number of records specified. Default to 300 (optional)
     * @param offset Offset is used to skip the number of records from the results. Default to 0 (optional)
     * @param templateId Filtered by template id (optional)
     * @param transactionType Filtered by transaction type, options are &#x60;PDF&#x60;, &#x60;JPEG&#x60; or &#x60;MERGE&#x60; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns status and output file </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listObjectsAsync(String limit, String offset, String templateId, String transactionType, final ApiCallback<ResponseSuccessListObjects> _callback) throws ApiException {

        okhttp3.Call localVarCall = listObjectsValidateBeforeCall(limit, offset, templateId, transactionType, _callback);
        Type localVarReturnType = new TypeToken<ResponseSuccessListObjects>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
