/*
 * APITemplate.io API Reference
 * # Introduction   Welcome to the [APITemplate.io](https://apitemplate.io) API v2!  APITemplate.io provides PDF generation services including [Template-based PDF generation](https://apitemplate.io/pdf-generation-api/), [HTML to PDF](https://apitemplate.io/html-to-pdf-api/), and [URL to PDF conversions](https://apitemplate.io/create-pdf-from-url/), as well as an [image generation API](https://apitemplate.io/image-generation-api/).  This page contains the documentation on how to use APITemplate.io through API calls. With the APITemplate.io API, you can create PDF documents and images, as well as manage your templates.  Our API is built on RESTful HTTP, so you can utilize any HTTP/REST library of your choice in your preferred programming language to interact with APITemplate.io's API.  **Steps to produce PDFs/Images** 1. Design your template(s) using our intuitive drag-and-drop template editor or the HTML editor and save it. 2. Integrate your workflow, either with platforms like Zapier, Make.com/Integromat, Bubble.io, or any programming languages that support REST API, to send us the JSON data along with the template ID/URL/or HTML content. 3. Our REST API will then return a download URL for the images (in PNG and JPEG formats) or PDFs.  # Authentication Upon signing up for an account, an API key will be generated for you. If needed, you can reset this API key via the web console (under the \"API Integration\" section).  To integrate with our services, you need to authenticate with the APITemplate.io API. Provide your secret key in the request header using the X-API-KEY field.   # Content Type and CORS  **Request Content-Type** The Content-Type for POST and GET requests is set to application/json.  **Cross-Origin Resource Sharing** This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/). And that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.    # Regional API endpoint(s) A regional API endpoint is intended for customers in the same region. The data for the request and generated PDFs/images are processed and stored within the region.  The regions are:  | Region               | Endpoint                            | Max Timeout (Seconds) | Max Payload Size(MB)** | |----------------------|-------------------------------------|-----------------------|-------------------------| | Default (Singapore)  | https://rest.apitemplate.io         | 100                   | 1                       | | Europe (Frankfurt)   | https://rest-de.apitemplate.io      | 100                   | 1                       | | US East (N. Virginia)| https://rest-us.apitemplate.io      | 100                   | 1                       | | Australia (Sydney)   | https://rest-au.apitemplate.io      | 30                    | 6                       |   Alternative Regions: | Region               | Endpoint                            | Max Timeout (Seconds) | Max Payload Size(MB)** | |----------------------|-------------------------------------|-----------------------|-------------------------| | Default (Singapore)  | https://rest-alt.apitemplate.io     | 30                    | 6                       | | Europe (Frankfurt)   | https://rest-alt-de.apitemplate.io  | 30                    | 6                       | | US East (N. Virginia)| https://rest-alt-us.apitemplate.io  | 30                    | 6                       |  ** Note: - Payload size applies to request and response - If \"export_type\" is set to `json` which output file that on AWS S3 doesn't have the limitation - If the \"export_type\" is set to `file` which returns binary data of the generated PDF, the file size of the generated PDF is limited to either 6MB or 1MB based on the region    Other regions are available on request, contact us at hello@apitemplate.io for more information  # Rate limiting Our API endpoints use IP-based rate limiting to ensure fair usage and prevent abuse. Users are allowed to make up to **100 requests per 10 seconds**. This rate limit is designed to accommodate a reasonable volume of requests while maintaining optimal performance for all users.  However, if you exceed this limit and make additional requests, you will receive a response with HTTP code 429. This status code indicates that you have reached the rate limit and need to wait before making further requests. 
 *
 * The version of the OpenAPI document: Version 2.0
 * Contact: hello@apitemplate.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The settings object contains various properties to configure the PDF generation. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-17T13:38:29.640715+08:00[Asia/Singapore]")
public class PDFGenerationSettingsObject {
  public static final String SERIALIZED_NAME_PAPER_SIZE = "paper_size";
  @SerializedName(SERIALIZED_NAME_PAPER_SIZE)
  private String paperSize;

  public static final String SERIALIZED_NAME_CUSTOM_WIDTH = "custom_width";
  @SerializedName(SERIALIZED_NAME_CUSTOM_WIDTH)
  private String customWidth;

  public static final String SERIALIZED_NAME_CUSTOM_HEIGHT = "custom_height";
  @SerializedName(SERIALIZED_NAME_CUSTOM_HEIGHT)
  private String customHeight;

  public static final String SERIALIZED_NAME_ORIENTATION = "orientation";
  @SerializedName(SERIALIZED_NAME_ORIENTATION)
  private String orientation;

  public static final String SERIALIZED_NAME_HEADER_FONT_SIZE = "header_font_size";
  @SerializedName(SERIALIZED_NAME_HEADER_FONT_SIZE)
  private String headerFontSize;

  public static final String SERIALIZED_NAME_MARGIN_TOP = "margin_top";
  @SerializedName(SERIALIZED_NAME_MARGIN_TOP)
  private String marginTop;

  public static final String SERIALIZED_NAME_MARGIN_RIGHT = "margin_right";
  @SerializedName(SERIALIZED_NAME_MARGIN_RIGHT)
  private String marginRight;

  public static final String SERIALIZED_NAME_MARGIN_BOTTOM = "margin_bottom";
  @SerializedName(SERIALIZED_NAME_MARGIN_BOTTOM)
  private String marginBottom;

  public static final String SERIALIZED_NAME_MARGIN_LEFT = "margin_left";
  @SerializedName(SERIALIZED_NAME_MARGIN_LEFT)
  private String marginLeft;

  public static final String SERIALIZED_NAME_PRINT_BACKGROUND = "print_background";
  @SerializedName(SERIALIZED_NAME_PRINT_BACKGROUND)
  private String printBackground;

  public static final String SERIALIZED_NAME_DISPLAY_HEADER_FOOTER = "displayHeaderFooter";
  @SerializedName(SERIALIZED_NAME_DISPLAY_HEADER_FOOTER)
  private Boolean displayHeaderFooter;

  public static final String SERIALIZED_NAME_CUSTOM_HEADER = "custom_header";
  @SerializedName(SERIALIZED_NAME_CUSTOM_HEADER)
  private String customHeader;

  public static final String SERIALIZED_NAME_CUSTOM_FOOTER = "custom_footer";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FOOTER)
  private String customFooter;

  public PDFGenerationSettingsObject() {
  }

  public PDFGenerationSettingsObject paperSize(String paperSize) {
    
    this.paperSize = paperSize;
    return this;
  }

   /**
   * Specifies the paper size for the PDF. The available options are Letter, Legal, Tabloid, Ledger, A0, A1, A2, A3, A4, A5,A6 or custom. custom dimensions specified as \&quot;custom_width\&quot; and \&quot;custom_height\&quot;. 
   * @return paperSize
  **/
  @javax.annotation.Nullable
  public String getPaperSize() {
    return paperSize;
  }


  public void setPaperSize(String paperSize) {
    this.paperSize = paperSize;
  }


  public PDFGenerationSettingsObject customWidth(String customWidth) {
    
    this.customWidth = customWidth;
    return this;
  }

   /**
   * Custom width for the custom paper size. Valid units are mm, px and cm. eg: 30mm 
   * @return customWidth
  **/
  @javax.annotation.Nullable
  public String getCustomWidth() {
    return customWidth;
  }


  public void setCustomWidth(String customWidth) {
    this.customWidth = customWidth;
  }


  public PDFGenerationSettingsObject customHeight(String customHeight) {
    
    this.customHeight = customHeight;
    return this;
  }

   /**
   * Custom height for the custom paper size. Valid units are mm, px and cm. eg: 30mm 
   * @return customHeight
  **/
  @javax.annotation.Nullable
  public String getCustomHeight() {
    return customHeight;
  }


  public void setCustomHeight(String customHeight) {
    this.customHeight = customHeight;
  }


  public PDFGenerationSettingsObject orientation(String orientation) {
    
    this.orientation = orientation;
    return this;
  }

   /**
   * Specifies the orientation of the PDF. The available options are \&quot;1\&quot; for portrait and \&quot;2\&quot; for landscape. 
   * @return orientation
  **/
  @javax.annotation.Nullable
  public String getOrientation() {
    return orientation;
  }


  public void setOrientation(String orientation) {
    this.orientation = orientation;
  }


  public PDFGenerationSettingsObject headerFontSize(String headerFontSize) {
    
    this.headerFontSize = headerFontSize;
    return this;
  }

   /**
   * Specifies the font size for the header in the PDF. 
   * @return headerFontSize
  **/
  @javax.annotation.Nullable
  public String getHeaderFontSize() {
    return headerFontSize;
  }


  public void setHeaderFontSize(String headerFontSize) {
    this.headerFontSize = headerFontSize;
  }


  public PDFGenerationSettingsObject marginTop(String marginTop) {
    
    this.marginTop = marginTop;
    return this;
  }

   /**
   * Specify the top margin for the PDF in millimeters (mm). 
   * @return marginTop
  **/
  @javax.annotation.Nullable
  public String getMarginTop() {
    return marginTop;
  }


  public void setMarginTop(String marginTop) {
    this.marginTop = marginTop;
  }


  public PDFGenerationSettingsObject marginRight(String marginRight) {
    
    this.marginRight = marginRight;
    return this;
  }

   /**
   * Specify the right margin for the PDF in millimeters (mm). 
   * @return marginRight
  **/
  @javax.annotation.Nullable
  public String getMarginRight() {
    return marginRight;
  }


  public void setMarginRight(String marginRight) {
    this.marginRight = marginRight;
  }


  public PDFGenerationSettingsObject marginBottom(String marginBottom) {
    
    this.marginBottom = marginBottom;
    return this;
  }

   /**
   * Specify the bottom margin for the PDF in millimeters (mm). 
   * @return marginBottom
  **/
  @javax.annotation.Nullable
  public String getMarginBottom() {
    return marginBottom;
  }


  public void setMarginBottom(String marginBottom) {
    this.marginBottom = marginBottom;
  }


  public PDFGenerationSettingsObject marginLeft(String marginLeft) {
    
    this.marginLeft = marginLeft;
    return this;
  }

   /**
   * Specify the left margin for the PDF in millimeters (mm). 
   * @return marginLeft
  **/
  @javax.annotation.Nullable
  public String getMarginLeft() {
    return marginLeft;
  }


  public void setMarginLeft(String marginLeft) {
    this.marginLeft = marginLeft;
  }


  public PDFGenerationSettingsObject printBackground(String printBackground) {
    
    this.printBackground = printBackground;
    return this;
  }

   /**
   * Specifies whether to print the background graphics and colors in the PDF. Set to \&quot;1\&quot; to include backgrounds or \&quot;0\&quot; to exclude them. 
   * @return printBackground
  **/
  @javax.annotation.Nullable
  public String getPrintBackground() {
    return printBackground;
  }


  public void setPrintBackground(String printBackground) {
    this.printBackground = printBackground;
  }


  public PDFGenerationSettingsObject displayHeaderFooter(Boolean displayHeaderFooter) {
    
    this.displayHeaderFooter = displayHeaderFooter;
    return this;
  }

   /**
   * Specifies whether to display the header and footer in the PDF. Set to true to include the header and footer or false to exclude them. 
   * @return displayHeaderFooter
  **/
  @javax.annotation.Nullable
  public Boolean getDisplayHeaderFooter() {
    return displayHeaderFooter;
  }


  public void setDisplayHeaderFooter(Boolean displayHeaderFooter) {
    this.displayHeaderFooter = displayHeaderFooter;
  }


  public PDFGenerationSettingsObject customHeader(String customHeader) {
    
    this.customHeader = customHeader;
    return this;
  }

   /**
   * Specify custom HTML markup for the headerof the PDF. These properties should contain valid HTML markup, including any necessary CSS styles. 
   * @return customHeader
  **/
  @javax.annotation.Nullable
  public String getCustomHeader() {
    return customHeader;
  }


  public void setCustomHeader(String customHeader) {
    this.customHeader = customHeader;
  }


  public PDFGenerationSettingsObject customFooter(String customFooter) {
    
    this.customFooter = customFooter;
    return this;
  }

   /**
   * Specify custom HTML markup for the footer of the PDF. These properties should contain valid HTML markup, including any necessary CSS styles. 
   * @return customFooter
  **/
  @javax.annotation.Nullable
  public String getCustomFooter() {
    return customFooter;
  }


  public void setCustomFooter(String customFooter) {
    this.customFooter = customFooter;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PDFGenerationSettingsObject pdFGenerationSettingsObject = (PDFGenerationSettingsObject) o;
    return Objects.equals(this.paperSize, pdFGenerationSettingsObject.paperSize) &&
        Objects.equals(this.customWidth, pdFGenerationSettingsObject.customWidth) &&
        Objects.equals(this.customHeight, pdFGenerationSettingsObject.customHeight) &&
        Objects.equals(this.orientation, pdFGenerationSettingsObject.orientation) &&
        Objects.equals(this.headerFontSize, pdFGenerationSettingsObject.headerFontSize) &&
        Objects.equals(this.marginTop, pdFGenerationSettingsObject.marginTop) &&
        Objects.equals(this.marginRight, pdFGenerationSettingsObject.marginRight) &&
        Objects.equals(this.marginBottom, pdFGenerationSettingsObject.marginBottom) &&
        Objects.equals(this.marginLeft, pdFGenerationSettingsObject.marginLeft) &&
        Objects.equals(this.printBackground, pdFGenerationSettingsObject.printBackground) &&
        Objects.equals(this.displayHeaderFooter, pdFGenerationSettingsObject.displayHeaderFooter) &&
        Objects.equals(this.customHeader, pdFGenerationSettingsObject.customHeader) &&
        Objects.equals(this.customFooter, pdFGenerationSettingsObject.customFooter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(paperSize, customWidth, customHeight, orientation, headerFontSize, marginTop, marginRight, marginBottom, marginLeft, printBackground, displayHeaderFooter, customHeader, customFooter);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PDFGenerationSettingsObject {\n");
    sb.append("    paperSize: ").append(toIndentedString(paperSize)).append("\n");
    sb.append("    customWidth: ").append(toIndentedString(customWidth)).append("\n");
    sb.append("    customHeight: ").append(toIndentedString(customHeight)).append("\n");
    sb.append("    orientation: ").append(toIndentedString(orientation)).append("\n");
    sb.append("    headerFontSize: ").append(toIndentedString(headerFontSize)).append("\n");
    sb.append("    marginTop: ").append(toIndentedString(marginTop)).append("\n");
    sb.append("    marginRight: ").append(toIndentedString(marginRight)).append("\n");
    sb.append("    marginBottom: ").append(toIndentedString(marginBottom)).append("\n");
    sb.append("    marginLeft: ").append(toIndentedString(marginLeft)).append("\n");
    sb.append("    printBackground: ").append(toIndentedString(printBackground)).append("\n");
    sb.append("    displayHeaderFooter: ").append(toIndentedString(displayHeaderFooter)).append("\n");
    sb.append("    customHeader: ").append(toIndentedString(customHeader)).append("\n");
    sb.append("    customFooter: ").append(toIndentedString(customFooter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("paper_size");
    openapiFields.add("custom_width");
    openapiFields.add("custom_height");
    openapiFields.add("orientation");
    openapiFields.add("header_font_size");
    openapiFields.add("margin_top");
    openapiFields.add("margin_right");
    openapiFields.add("margin_bottom");
    openapiFields.add("margin_left");
    openapiFields.add("print_background");
    openapiFields.add("displayHeaderFooter");
    openapiFields.add("custom_header");
    openapiFields.add("custom_footer");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to PDFGenerationSettingsObject
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PDFGenerationSettingsObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PDFGenerationSettingsObject is not found in the empty JSON string", PDFGenerationSettingsObject.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!PDFGenerationSettingsObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PDFGenerationSettingsObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("paper_size") != null && !jsonObj.get("paper_size").isJsonNull()) && !jsonObj.get("paper_size").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paper_size` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paper_size").toString()));
      }
      if ((jsonObj.get("custom_width") != null && !jsonObj.get("custom_width").isJsonNull()) && !jsonObj.get("custom_width").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custom_width` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custom_width").toString()));
      }
      if ((jsonObj.get("custom_height") != null && !jsonObj.get("custom_height").isJsonNull()) && !jsonObj.get("custom_height").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custom_height` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custom_height").toString()));
      }
      if ((jsonObj.get("orientation") != null && !jsonObj.get("orientation").isJsonNull()) && !jsonObj.get("orientation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orientation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orientation").toString()));
      }
      if ((jsonObj.get("header_font_size") != null && !jsonObj.get("header_font_size").isJsonNull()) && !jsonObj.get("header_font_size").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `header_font_size` to be a primitive type in the JSON string but got `%s`", jsonObj.get("header_font_size").toString()));
      }
      if ((jsonObj.get("margin_top") != null && !jsonObj.get("margin_top").isJsonNull()) && !jsonObj.get("margin_top").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `margin_top` to be a primitive type in the JSON string but got `%s`", jsonObj.get("margin_top").toString()));
      }
      if ((jsonObj.get("margin_right") != null && !jsonObj.get("margin_right").isJsonNull()) && !jsonObj.get("margin_right").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `margin_right` to be a primitive type in the JSON string but got `%s`", jsonObj.get("margin_right").toString()));
      }
      if ((jsonObj.get("margin_bottom") != null && !jsonObj.get("margin_bottom").isJsonNull()) && !jsonObj.get("margin_bottom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `margin_bottom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("margin_bottom").toString()));
      }
      if ((jsonObj.get("margin_left") != null && !jsonObj.get("margin_left").isJsonNull()) && !jsonObj.get("margin_left").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `margin_left` to be a primitive type in the JSON string but got `%s`", jsonObj.get("margin_left").toString()));
      }
      if ((jsonObj.get("print_background") != null && !jsonObj.get("print_background").isJsonNull()) && !jsonObj.get("print_background").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `print_background` to be a primitive type in the JSON string but got `%s`", jsonObj.get("print_background").toString()));
      }
      if ((jsonObj.get("custom_header") != null && !jsonObj.get("custom_header").isJsonNull()) && !jsonObj.get("custom_header").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custom_header` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custom_header").toString()));
      }
      if ((jsonObj.get("custom_footer") != null && !jsonObj.get("custom_footer").isJsonNull()) && !jsonObj.get("custom_footer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custom_footer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custom_footer").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PDFGenerationSettingsObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PDFGenerationSettingsObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PDFGenerationSettingsObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PDFGenerationSettingsObject.class));

       return (TypeAdapter<T>) new TypeAdapter<PDFGenerationSettingsObject>() {
           @Override
           public void write(JsonWriter out, PDFGenerationSettingsObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PDFGenerationSettingsObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PDFGenerationSettingsObject given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PDFGenerationSettingsObject
  * @throws IOException if the JSON string is invalid with respect to PDFGenerationSettingsObject
  */
  public static PDFGenerationSettingsObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PDFGenerationSettingsObject.class);
  }

 /**
  * Convert an instance of PDFGenerationSettingsObject to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

