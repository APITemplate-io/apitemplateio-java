/*
 * APITemplate.io API Reference
 * # Introduction   Welcome to the [APITemplate.io](https://apitemplate.io) API v2!  APITemplate.io provides PDF generation services including [Template-based PDF generation](https://apitemplate.io/pdf-generation-api/), [HTML to PDF](https://apitemplate.io/html-to-pdf-api/), and [URL to PDF conversions](https://apitemplate.io/create-pdf-from-url/), as well as an [image generation API](https://apitemplate.io/image-generation-api/).  This page contains the documentation on how to use APITemplate.io through API calls. With the APITemplate.io API, you can create PDF documents and images, as well as manage your templates.  Our API is built on RESTful HTTP, so you can utilize any HTTP/REST library of your choice in your preferred programming language to interact with APITemplate.io's API.  **Steps to produce PDFs/Images** 1. Design your template(s) using our intuitive drag-and-drop template editor or the HTML editor and save it. 2. Integrate your workflow, either with platforms like Zapier, Make.com/Integromat, Bubble.io, or any programming languages that support REST API, to send us the JSON data along with the template ID/URL/or HTML content. 3. Our REST API will then return a download URL for the images (in PNG and JPEG formats) or PDFs.  # Authentication Upon signing up for an account, an API key will be generated for you. If needed, you can reset this API key via the web console (under the \"API Integration\" section).  To integrate with our services, you need to authenticate with the APITemplate.io API. Provide your secret key in the request header using the X-API-KEY field.   # Content Type and CORS  **Request Content-Type** The Content-Type for POST and GET requests is set to application/json.  **Cross-Origin Resource Sharing** This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/). And that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.    # Regional API endpoint(s) A regional API endpoint is intended for customers in the same region. The data for the request and generated PDFs/images are processed and stored within the region.  The regions are:  | Region               | Endpoint                            | Max Timeout (Seconds) | Max Payload Size(MB)** | |----------------------|-------------------------------------|-----------------------|-------------------------| | Default (Singapore)  | https://rest.apitemplate.io         | 100                   | 1                       | | Europe (Frankfurt)   | https://rest-de.apitemplate.io      | 100                   | 1                       | | US East (N. Virginia)| https://rest-us.apitemplate.io      | 100                   | 1                       | | Australia (Sydney)   | https://rest-au.apitemplate.io      | 30                    | 6                       |   Alternative Regions: | Region               | Endpoint                            | Max Timeout (Seconds) | Max Payload Size(MB)** | |----------------------|-------------------------------------|-----------------------|-------------------------| | Default (Singapore)  | https://rest-alt.apitemplate.io     | 30                    | 6                       | | Europe (Frankfurt)   | https://rest-alt-de.apitemplate.io  | 30                    | 6                       | | US East (N. Virginia)| https://rest-alt-us.apitemplate.io  | 30                    | 6                       |  ** Note: - Payload size applies to request and response - If \"export_type\" is set to `json` which output file that on AWS S3 doesn't have the limitation - If the \"export_type\" is set to `file` which returns binary data of the generated PDF, the file size of the generated PDF is limited to either 6MB or 1MB based on the region    Other regions are available on request, contact us at hello@apitemplate.io for more information  # Rate limiting Our API endpoints use IP-based rate limiting to ensure fair usage and prevent abuse. Users are allowed to make up to **100 requests per 10 seconds**. This rate limit is designed to accommodate a reasonable volume of requests while maintaining optimal performance for all users.  However, if you exceed this limit and make additional requests, you will receive a response with HTTP code 429. This status code indicates that you have reached the rate limit and need to wait before making further requests. 
 *
 * The version of the OpenAPI document: Version 2.0
 * Contact: hello@apitemplate.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ResponseSuccessPDFFilePostActionsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ResponseSuccessPDFFile
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-17T13:38:29.640715+08:00[Asia/Singapore]")
public class ResponseSuccessPDFFile {
  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_DOWNLOAD_URL = "download_url";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD_URL)
  private String downloadUrl;

  public static final String SERIALIZED_NAME_TEMPLATE_ID = "template_id";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_ID)
  private String templateId;

  public static final String SERIALIZED_NAME_TOTAL_PAGES = "total_pages";
  @SerializedName(SERIALIZED_NAME_TOTAL_PAGES)
  private Integer totalPages;

  public static final String SERIALIZED_NAME_TRANSACTION_REF = "transaction_ref";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_REF)
  private String transactionRef;

  public static final String SERIALIZED_NAME_POST_ACTIONS = "post_actions";
  @SerializedName(SERIALIZED_NAME_POST_ACTIONS)
  private List<ResponseSuccessPDFFilePostActionsInner> postActions;

  public ResponseSuccessPDFFile() {
  }

  public ResponseSuccessPDFFile status(String status) {
    
    this.status = status;
    return this;
  }

   /**
   * Status
   * @return status
  **/
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }


  public ResponseSuccessPDFFile downloadUrl(String downloadUrl) {
    
    this.downloadUrl = downloadUrl;
    return this;
  }

   /**
   * Download URL
   * @return downloadUrl
  **/
  @javax.annotation.Nullable
  public String getDownloadUrl() {
    return downloadUrl;
  }


  public void setDownloadUrl(String downloadUrl) {
    this.downloadUrl = downloadUrl;
  }


  public ResponseSuccessPDFFile templateId(String templateId) {
    
    this.templateId = templateId;
    return this;
  }

   /**
   * Template ID
   * @return templateId
  **/
  @javax.annotation.Nullable
  public String getTemplateId() {
    return templateId;
  }


  public void setTemplateId(String templateId) {
    this.templateId = templateId;
  }


  public ResponseSuccessPDFFile totalPages(Integer totalPages) {
    
    this.totalPages = totalPages;
    return this;
  }

   /**
   * Page count
   * @return totalPages
  **/
  @javax.annotation.Nullable
  public Integer getTotalPages() {
    return totalPages;
  }


  public void setTotalPages(Integer totalPages) {
    this.totalPages = totalPages;
  }


  public ResponseSuccessPDFFile transactionRef(String transactionRef) {
    
    this.transactionRef = transactionRef;
    return this;
  }

   /**
   * Transaction reference
   * @return transactionRef
  **/
  @javax.annotation.Nullable
  public String getTransactionRef() {
    return transactionRef;
  }


  public void setTransactionRef(String transactionRef) {
    this.transactionRef = transactionRef;
  }


  public ResponseSuccessPDFFile postActions(List<ResponseSuccessPDFFilePostActionsInner> postActions) {
    
    this.postActions = postActions;
    return this;
  }

  public ResponseSuccessPDFFile addPostActionsItem(ResponseSuccessPDFFilePostActionsInner postActionsItem) {
    if (this.postActions == null) {
      this.postActions = new ArrayList<>();
    }
    this.postActions.add(postActionsItem);
    return this;
  }

   /**
   * Get postActions
   * @return postActions
  **/
  @javax.annotation.Nullable
  public List<ResponseSuccessPDFFilePostActionsInner> getPostActions() {
    return postActions;
  }


  public void setPostActions(List<ResponseSuccessPDFFilePostActionsInner> postActions) {
    this.postActions = postActions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResponseSuccessPDFFile responseSuccessPDFFile = (ResponseSuccessPDFFile) o;
    return Objects.equals(this.status, responseSuccessPDFFile.status) &&
        Objects.equals(this.downloadUrl, responseSuccessPDFFile.downloadUrl) &&
        Objects.equals(this.templateId, responseSuccessPDFFile.templateId) &&
        Objects.equals(this.totalPages, responseSuccessPDFFile.totalPages) &&
        Objects.equals(this.transactionRef, responseSuccessPDFFile.transactionRef) &&
        Objects.equals(this.postActions, responseSuccessPDFFile.postActions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(status, downloadUrl, templateId, totalPages, transactionRef, postActions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResponseSuccessPDFFile {\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    downloadUrl: ").append(toIndentedString(downloadUrl)).append("\n");
    sb.append("    templateId: ").append(toIndentedString(templateId)).append("\n");
    sb.append("    totalPages: ").append(toIndentedString(totalPages)).append("\n");
    sb.append("    transactionRef: ").append(toIndentedString(transactionRef)).append("\n");
    sb.append("    postActions: ").append(toIndentedString(postActions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("status");
    openapiFields.add("download_url");
    openapiFields.add("template_id");
    openapiFields.add("total_pages");
    openapiFields.add("transaction_ref");
    openapiFields.add("post_actions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ResponseSuccessPDFFile
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResponseSuccessPDFFile.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResponseSuccessPDFFile is not found in the empty JSON string", ResponseSuccessPDFFile.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ResponseSuccessPDFFile.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResponseSuccessPDFFile` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("download_url") != null && !jsonObj.get("download_url").isJsonNull()) && !jsonObj.get("download_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `download_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("download_url").toString()));
      }
      if ((jsonObj.get("template_id") != null && !jsonObj.get("template_id").isJsonNull()) && !jsonObj.get("template_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `template_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("template_id").toString()));
      }
      if ((jsonObj.get("transaction_ref") != null && !jsonObj.get("transaction_ref").isJsonNull()) && !jsonObj.get("transaction_ref").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transaction_ref` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transaction_ref").toString()));
      }
      if (jsonObj.get("post_actions") != null && !jsonObj.get("post_actions").isJsonNull()) {
        JsonArray jsonArraypostActions = jsonObj.getAsJsonArray("post_actions");
        if (jsonArraypostActions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("post_actions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `post_actions` to be an array in the JSON string but got `%s`", jsonObj.get("post_actions").toString()));
          }

          // validate the optional field `post_actions` (array)
          for (int i = 0; i < jsonArraypostActions.size(); i++) {
            ResponseSuccessPDFFilePostActionsInner.validateJsonElement(jsonArraypostActions.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResponseSuccessPDFFile.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResponseSuccessPDFFile' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResponseSuccessPDFFile> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResponseSuccessPDFFile.class));

       return (TypeAdapter<T>) new TypeAdapter<ResponseSuccessPDFFile>() {
           @Override
           public void write(JsonWriter out, ResponseSuccessPDFFile value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResponseSuccessPDFFile read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ResponseSuccessPDFFile given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ResponseSuccessPDFFile
  * @throws IOException if the JSON string is invalid with respect to ResponseSuccessPDFFile
  */
  public static ResponseSuccessPDFFile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResponseSuccessPDFFile.class);
  }

 /**
  * Convert an instance of ResponseSuccessPDFFile to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

