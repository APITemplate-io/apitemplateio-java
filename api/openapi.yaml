openapi: 3.0.0
info:
  contact:
    email: hello@apitemplate.io
    url: https://apitemplate.io
  description: |
    # Introduction


    Welcome to the [APITemplate.io](https://apitemplate.io) API v2!

    APITemplate.io provides PDF generation services including [Template-based PDF generation](https://apitemplate.io/pdf-generation-api/), [HTML to PDF](https://apitemplate.io/html-to-pdf-api/), and [URL to PDF conversions](https://apitemplate.io/create-pdf-from-url/), as well as an [image generation API](https://apitemplate.io/image-generation-api/).

    This page contains the documentation on how to use APITemplate.io through API calls. With the APITemplate.io API, you can create PDF documents and images, as well as manage your templates.

    Our API is built on RESTful HTTP, so you can utilize any HTTP/REST library of your choice in your preferred programming language to interact with APITemplate.io's API.

    **Steps to produce PDFs/Images**
    1. Design your template(s) using our intuitive drag-and-drop template editor or the HTML editor and save it.
    2. Integrate your workflow, either with platforms like Zapier, Make.com/Integromat, Bubble.io, or any programming languages that support REST API, to send us the JSON data along with the template ID/URL/or HTML content.
    3. Our REST API will then return a download URL for the images (in PNG and JPEG formats) or PDFs.

    # Authentication
    Upon signing up for an account, an API key will be generated for you. If needed, you can reset this API key via the web console (under the "API Integration" section).

    To integrate with our services, you need to authenticate with the APITemplate.io API. Provide your secret key in the request header using the X-API-KEY field.


    # Content Type and CORS

    **Request Content-Type**
    The Content-Type for POST and GET requests is set to application/json.

    **Cross-Origin Resource Sharing**
    This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).
    And that allows cross-domain communication from the browser.
    All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.



    # Regional API endpoint(s)
    A regional API endpoint is intended for customers in the same region. The data for the request and generated PDFs/images are processed and stored within the region.

    The regions are:

    | Region               | Endpoint                            | Max Timeout (Seconds) | Max Payload Size(MB)** |
    |----------------------|-------------------------------------|-----------------------|-------------------------|
    | Default (Singapore)  | https://rest.apitemplate.io         | 100                   | 1                       |
    | Europe (Frankfurt)   | https://rest-de.apitemplate.io      | 100                   | 1                       |
    | US East (N. Virginia)| https://rest-us.apitemplate.io      | 100                   | 1                       |
    | Australia (Sydney)   | https://rest-au.apitemplate.io      | 30                    | 6                       |


    Alternative Regions:
    | Region               | Endpoint                            | Max Timeout (Seconds) | Max Payload Size(MB)** |
    |----------------------|-------------------------------------|-----------------------|-------------------------|
    | Default (Singapore)  | https://rest-alt.apitemplate.io     | 30                    | 6                       |
    | Europe (Frankfurt)   | https://rest-alt-de.apitemplate.io  | 30                    | 6                       |
    | US East (N. Virginia)| https://rest-alt-us.apitemplate.io  | 30                    | 6                       |

    ** Note:
    - Payload size applies to request and response
    - If "export_type" is set to `json` which output file that on AWS S3 doesn't have the limitation
    - If the "export_type" is set to `file` which returns binary data of the generated PDF, the file size of the generated PDF is limited to either 6MB or 1MB based on the region



    Other regions are available on request, contact us at hello@apitemplate.io for more information

    # Rate limiting
    Our API endpoints use IP-based rate limiting to ensure fair usage and prevent abuse. Users are allowed to make up to **100 requests per 10 seconds**. This rate limit is designed to accommodate a reasonable volume of requests while maintaining optimal performance for all users.

    However, if you exceed this limit and make additional requests, you will receive a response with HTTP code 429. This status code indicates that you have reached the rate limit and need to wait before making further requests.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: https://apitemplate.io/privacy-policy/
  title: APITemplate.io API Reference
  version: Version 2.0
  x-logo:
    url: images/logo_new2_with_text2.png
    altText: APITemplate.io logo
servers:
- url: https://rest.apitemplate.io
- url: https://rest-au.apitemplate.io
- url: https://rest-de.apitemplate.io
- url: https://rest-us.apitemplate.io
security:
- ApiKeyAuth: []
paths:
  /v2/create-pdf:
    post:
      description: This endpoint creates a PDF file with JSON data and your template.
        We support synchoronus and asynchronous PDF generation.
      operationId: create-pdf
      parameters:
      - description: "Your template id, it can be obtained in the web console"
        example: 00377b2b1e0ee394
        explode: true
        in: query
        name: template_id
        required: true
        schema:
          type: string
        style: form
      - description: |
          - Either `file` or `json`(Default).
            - The option `json` returns a JSON object, and the output PDF is stored on a CDN. Use this with the parameter `expiration`
            - The option `file` returns binary data of the generated PDF(Secure and completely private) and the response HTTP header Content-Disposition is set to attachment.
        example: json
        explode: true
        in: query
        name: export_type
        required: false
        schema:
          type: string
        style: form
      - description: |
          - Expiration of the generated PDF in minutes(default to `0`, store permanently)
            - Use `0` to store on cdn permanently
            - Or use the range between `1` minute and `10080` minutes(7 days) to specify the expiration of the generated PDF
        example: 5
        explode: true
        in: query
        name: expiration
        required: false
        schema:
          type: integer
        style: form
      - description: |
          - Either `1` or `0`(Default).
          - To enable output of html content, set the value to `1` and it will return in the JSON response as html_url field (as a URL)
        example: "0"
        explode: true
        in: query
        name: output_html
        required: false
        schema:
          type: string
        style: form
      - description: |
          - Either `pdf`(Default) or `html`.
          - It's generating PDF by default. However, you can specify output_format=html to generate only HTML(It will return in the JSON response as download_url field as a URL).
        example: pdf
        explode: true
        in: query
        name: output_format
        required: false
        schema:
          type: string
        style: form
      - description: |
          - Default to UUID (e.g 0c93bd9e-9ebb-4634-a70f-de9131848416.pdf). Use this to specify custom file name, it should end with `.pdf`
        example: invoice_89326.pdf
        explode: true
        in: query
        name: filename
        required: false
        schema:
          type: string
        style: form
      - description: |
          - We embed the original images by default, meaning large PDF file sizes. Specifying the option 'image_resample_res' helps reduce the PDF file size by downsampling the images of the current PDF to a resolution(in DPI). Common values are 72, 96, 150, 300 and 600.
        example: "150"
        explode: true
        in: query
        name: image_resample_res
        required: false
        schema:
          type: string
        style: form
      - description: |
          - Use CMYK color profile, 1=true, 0=false. Default to '0'
        example: "0"
        explode: true
        in: query
        name: is_cmyk
        required: false
        schema:
          type: string
        style: form
      - description: |
          - Upload the generated PDFs/images to our storage CDN, default to `1`. If you have configured `Post Action` to upload the PDFs/Images to your own S3, please set it to `0`.
        example: "1"
        explode: true
        in: query
        name: cloud_storage
        required: false
        schema:
          type: integer
        style: form
      - description: |
          Default to PDF1.4. Options are PDFA1B, PDFA2 and PDFA3 (This is an experimental feature)
        explode: true
        in: query
        name: pdf_standard
        required: false
        schema:
          type: string
        style: form
      - description: |
          - This is to specify the file name for `Post Action(S3 Storage)`.
          - Please do not specify the file extension
          - Please make sure the file name is unique
          - You might use slash (/) as the folder delimiter
        explode: true
        in: query
        name: postaction_s3_filekey
        required: false
        schema:
          type: string
        style: form
      - description: |
          - This is to overwrite the AWS Bucket for `Post Action(S3 Storage)`.
        explode: true
        in: query
        name: postaction_s3_bucket
        required: false
        schema:
          type: string
        style: form
      - description: |
          - Specify an external reference ID for your own reference. It appears in the `list-objects` API.
        example: inv-iwj343jospig
        explode: true
        in: query
        name: meta
        required: false
        schema:
          type: string
        style: form
      - description: |
          - Either `1` or `0`(Default).  `0` is synchronous call(default), `1` is asynchronous call
          - To generate PDF asynchronously, set the value to `1` and the API call returns immediately. Once the PDF document is generated, we will make a HTTP/HTTPS GET to your URL(webhook_url) and will retry for 3 times before giving up.
          - If `async` is set to `1`, then `webhook_url` is mandatory
        example: "0"
        explode: true
        in: query
        name: async
        required: false
        schema:
          type: string
        style: form
      - description: |
          - It is the URL of your webhook URL, it starts with http:// or https:// and has to be urlencoded.
          - If `async` is set to `1`, then you have to specify the `webhook_url`.


          #### Format of Webhook callback

          Once the PDF is generated, we will initiate a HTTP/HTTPS GET call to the following URL:

          https://`[yourwebserver.com]`?&primary_url=`[primary_url]`&transaction_ref=`[transaction_ref]`&status=`[status]`&message=`[message]`

          - `[yourwebserver.com]`: The web services to handle the callback, which is the `webhook_url`
          - `[primary_url]`: The URL to the PDF document
          - `[transaction_ref]`: The transaction reference number
          - `[status]` : Status of the transaction, either `success` or `error`
          - `[message]` : Status message

          ***The following is a sample webhook call back to your server***

          https://yourwebserver.com?&primary_url=https%3A%2F%2Fpub-cdn.apitemplate.io%2F2021%2F06%2Fb692183d-46d7-3213-891a-460a5814ad3f.pdf&transaction_ref=b692183d-46d7-3213-891a-460a5814ad3f&status=success
        example: https://yourwebserver.com
        explode: true
        in: query
        name: webhook_url
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              description: JSON data
              example:
                invoice_number: INV38379
                date: 2021-09-30
                currency: USD
                total_amount: 82542.56
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseSuccessPDFFile'
          description: Returns status and output file
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      security:
      - ApiKeyAuth: []
      summary: Create a PDF
      tags:
      - API Integration
      x-code-samples:
      - lang: cURL
        source: |
          curl --header "Content-Type: application/json" \
          -H 'X-API-KEY: 6fa6g2pdXGIyHRhVlGh7U56Ada1eF' \
          --data '{ "invoice_number": "INV38379", "date": "2021-09-30", "currency": "USD", "total_amount": 82542.56 }' \
          "https://rest.apitemplate.io/v2/create-pdf?template_id=79667b2b1876e347"
      - lang: Python
        source: |
          import requests, json

          def main():
              api_key = "6fa6g2pdXGIyHRhVlGh7U56Ada1eF"
              template_id = "79667b2b1876e347"

              data = {
                "invoice_number": "INV38379",
                "date": "2021-09-30",
                "currency": "USD",
                "total_amount": 82542.56
              }

              response = requests.post(
                  F"https://rest.apitemplate.io/v2/create-pdf?template_id={template_id}",
                  headers = {"X-API-KEY": F"{api_key}"},
                  json= data
              )

          if __name__ == "__main__":
              main()
      - lang: PHP
        source: |
          <?php
              function generate($template_id,$api_key, $data) {
                  $url = "https://rest.apitemplate.io/v2/create-pdf?template_id=" . $template_id;
                  $headers = array("X-API-KEY: ".$api_key);
                  $curl = curl_init();
                  if ($data) curl_setopt($curl, CURLOPT_POSTFIELDS, $data);
                  curl_setopt($curl, CURLOPT_FOLLOWLOCATION, true);
                  curl_setopt($curl, CURLOPT_URL, $url);
                  curl_setopt($curl, CURLOPT_HTTPHEADER, $headers);
                  curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
                  $result = curl_exec($curl);
                  curl_close($curl);
                  if (!$result) {
                      return null;
                  }else{
                      $json_result = json_decode($result, 1);
                      if($json_result["status"]=="success"){
                          return $json_result["download_url"];
                      }else{
                          return null;
                      }
                  }
              }

              $tempate_id = "79667b2b1876e347";
              $api_key = "6fa6g2pdXGIyHRhVlGh7U56Ada1eF";
              $json_payload='{ "invoice_number": "INV38379", "date": "2021-09-30", "currency": "USD", "total_amount": 82542.56 }';
              echo generate($tempate_id,$api_key,$json_payload);
          ?>
      - lang: Node.js
        source: |
          const https = require('https');
          const http = require('http');
          const { URL } = require('url');

          (async () => {
              let resp = await httpPost(
                  'https://rest.apitemplate.io/v2/create-pdf?template_id=79667b2b1876e347',
                  '{ "invoice_number": "INV38379", "date": "2021-09-30", "currency": "USD", "total_amount": 82542.56 }',
                  '6fa6g2pdXGIyHRhVlGh7U56Ada1eF'
              );
              console.log(resp);
          })();


          async function httpPost(url_api, data, apiKey){
              const uri = new URL(url_api);
              const fx = uri.protocol === 'https:' ? https : http;
              const opts = {
                  method: 'POST',
                  hostname: uri.hostname,
                  port: uri.port,
                  path: `${uri.pathname}${uri.search==null?"":uri.search}`,
                  protocol: uri.protocol,
                  headers: {
                      'Content-Type': 'application/json',
                      'Content-Length': data.length,
                      "X-API-KEY": apiKey
                  }
              };

              return new Promise((resolve, reject) => {
                  const req = fx.request(opts, (res) => {
                      res.setEncoding('utf8');
                      let responseBody = '';
                      res.on('data', (chunk) => responseBody += chunk);
                      res.on('end', () => resolve(responseBody));
                  });

                  req.on('error', (err) => reject(err));
                  req.write(data)
                  req.end();
              });
          }
      - lang: CSharp
        source: |
          using System;
          using System.IO;
          using System.Net.Http;
          using System.Text.Json;
          using System.Threading.Tasks;

          namespace csharp
          {
              class ReturnContent{
                  public string download_url{get;set;}
                  public string status{get;set;}
              }

              class Program
              {
                  static async Task Main(string[] args)
                  {
                      var api_key = "6fa6g2pdXGIyHRhVlGh7U56Ada1eF";
                      var template_id = "79667b2b1876e347";
                      var url = $"https://rest.apitemplate.io/v2/create-pdf?template_id={template_id}";

                      var data = new {
                          invoice_number = "INV38379",
                          date = "2021-09-30",
                          currency = "USD",
                          total_amount = 82542.56
                        };


                      var json_content = JsonSerializer.Serialize(data);
                      var buffer = System.Text.Encoding.UTF8.GetBytes(json_content);
                      var byteContent = new ByteArrayContent(buffer);

                      Console.WriteLine(json_content);

                      var client = new HttpClient();
                      client.DefaultRequestHeaders.Add("X-API-KEY",api_key);
                      var response = await client.PostAsync(url,byteContent);
                      var ret = await response.Content.ReadAsStringAsync();

                      var returnContent = JsonSerializer.Deserialize<ReturnContent>(ret);

                      if(returnContent.status=="success"){
                          Console.WriteLine($"Downloading {returnContent.download_url}...");
                          var download_response = await client.GetAsync(returnContent.download_url);
                          using (var stream = await download_response.Content.ReadAsStreamAsync())
                          {
                              var fileInfo = new FileInfo("image.jpeg");
                              using (var fileStream = fileInfo.OpenWrite())
                              {
                                  await stream.CopyToAsync(fileStream);
                              }
                          }
                      }
                  }
              }
          }
      x-content-type: application/json
      x-accepts: application/json
  /v2/create-image:
    post:
      description: |
        This endpoint creates a JPEG file(along with PNG) with JSON data and your template
      operationId: create-image
      parameters:
      - description: "Your template id, it can be obtained in the web console"
        example: 00377b2b1e0ee394
        explode: true
        in: query
        name: template_id
        required: true
        schema:
          type: string
        style: form
      - description: |
          - Output image type(JPEG or PNG format), default to `all`. Options are `all`, `jpegOnly`,`pngOnly`.
        example: "1"
        explode: true
        in: query
        name: output_image_type
        required: false
        schema:
          type: string
        style: form
      - description: |
          - Expiration of the generated PDF in minutes(default to `0`, store permanently)
            - Use `0` to store on cdn permanently
            - Or use the range between `1` minute and `10080` minutes(7 days) to specify the expiration of the generated PDF
        example: 5
        explode: true
        in: query
        name: expiration
        required: false
        schema:
          type: integer
        style: form
      - description: |
          - Upload the generated PDFs/images to our storage CDN, default to `1`. If you have configured `Post Action` to upload the PDFs/Images to your own S3, please set it to `0`.
        example: "1"
        explode: true
        in: query
        name: cloud_storage
        required: false
        schema:
          type: integer
        style: form
      - description: |
          - This is to specify the file name for `Post Action(S3 Storage)`.
          - Please do not specify the file extension
          - Please make sure the file name is unique
          - You might use slash (/) as the folder delimiter
        explode: true
        in: query
        name: postaction_s3_filekey
        required: false
        schema:
          type: string
        style: form
      - description: |
          - This is to overwrite the AWS Bucket for `Post Action(S3 Storage)`.
        explode: true
        in: query
        name: postaction_s3_bucket
        required: false
        schema:
          type: string
        style: form
      - description: |
          - Specify an external reference ID for your own reference. It appears in the `list-objects` API.
        example: inv-iwj343jospig
        explode: true
        in: query
        name: meta
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              description: |
                JSON data
                - The following is the json format in the post body to generate an image
                ```
                {
                    "overrides": [
                        {
                            "name": "<object name 1>",
                            "property_1": "<value 1>",
                            "property_2": "<value 2>",
                            "property_3": "<value 3>",
                            ...
                        },
                        {
                            "name": "<object name 2>",
                            "property_2": "<value 2>",
                            ...
                        }
                    ]
                }
                ```
              example:
                overrides:
                - name: text_1
                  text: hello world
                  textBackgroundColor: "rgba(246, 243, 243, 0)"
                - name: image_1
                  src: https://via.placeholder.com/150
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseSuccessImageFile'
          description: Returns status and output file
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      security:
      - ApiKeyAuth: []
      summary: Create an Image
      tags:
      - API Integration
      x-code-samples:
      - lang: cURL
        source: |
          curl --header "Content-Type: application/json" \
          -H 'X-API-KEY: 6fa6g2pdXGIyHRhVlGh7U56Ada1eF' \
          --data '{ "overrides":[ { "name":"text_1", "text":"hello world", "textBackgroundColor":"rgba(246, 243, 243, 0)" }, { "name":"image_1", "src":"https://via.placeholder.com/150" } ] }' \
          "https://rest.apitemplate.io/v2/create-image?template_id=79667b2b1876e347"
      - lang: Python
        source: |
          import requests, json

          def main():
              api_key = "6fa6g2pdXGIyHRhVlGh7U56Ada1eF"
              template_id = "79667b2b1876e347"

              data = {
                "overrides":[
                    {
                      "name":"text_1",
                      "text":"hello world",
                      "textBackgroundColor":"rgba(246, 243, 243, 0)"
                    },
                    {
                      "name":"image_1",
                      "src":"https://via.placeholder.com/150"
                    }
                ]
              }

              response = requests.post(
                  F"https://rest.apitemplate.io/v2/create-image?template_id={template_id}",
                  headers = {"X-API-KEY": F"{api_key}"},
                  json= data
              )

          if __name__ == "__main__":
              main()
      - lang: PHP
        source: |
          <?php
              function generate($template_id,$api_key, $data) {
                  $url = "https://rest.apitemplate.io/v2/create-image?template_id=" . $template_id;
                  $headers = array("X-API-KEY: ".$api_key);
                  $curl = curl_init();
                  if ($data) curl_setopt($curl, CURLOPT_POSTFIELDS, $data);
                  curl_setopt($curl, CURLOPT_FOLLOWLOCATION, true);
                  curl_setopt($curl, CURLOPT_URL, $url);
                  curl_setopt($curl, CURLOPT_HTTPHEADER, $headers);
                  curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
                  $result = curl_exec($curl);
                  curl_close($curl);
                  if (!$result) {
                      return null;
                  }else{
                      $json_result = json_decode($result, 1);
                      if($json_result["status"]=="success"){
                          return $json_result["download_url"];
                      }else{
                          return null;
                      }
                  }
              }

              $tempate_id = "79667b2b1876e347";
              $api_key = "6fa6g2pdXGIyHRhVlGh7U56Ada1eF";
              $json_payload='{ "overrides":[ { "name":"text_1", "text":"hello world", "textBackgroundColor":"rgba(246, 243, 243, 0)" }, { "name":"image_1", "src":"https://via.placeholder.com/150" } ] }';
              echo generate($tempate_id,$api_key,$json_payload);
          ?>
      - lang: Node.js
        source: |
          const https = require('https');
          const http = require('http');
          const { URL } = require('url');

          (async () => {
              let resp = await httpPost(
                  'https://rest.apitemplate.io/v2/create-pdf?template_id=79667b2b1876e347',
                  '{ "overrides":[ { "name":"text_1", "text":"hello world", "textBackgroundColor":"rgba(246, 243, 243, 0)" }, { "name":"image_1", "src":"https://via.placeholder.com/150" } ] }',
                  '6fa6g2pdXGIyHRhVlGh7U56Ada1eF'
              );
              console.log(resp);
          })();


          async function httpPost(url_api, data, apiKey){
              const uri = new URL(url_api);
              const fx = uri.protocol === 'https:' ? https : http;
              const opts = {
                  method: 'POST',
                  hostname: uri.hostname,
                  port: uri.port,
                  path: `${uri.pathname}${uri.search==null?"":uri.search}`,
                  protocol: uri.protocol,
                  headers: {
                      'Content-Type': 'application/json',
                      'Content-Length': data.length,
                      "X-API-KEY": apiKey
                  }
              };

              return new Promise((resolve, reject) => {
                  const req = fx.request(opts, (res) => {
                      res.setEncoding('utf8');
                      let responseBody = '';
                      res.on('data', (chunk) => responseBody += chunk);
                      res.on('end', () => resolve(responseBody));
                  });

                  req.on('error', (err) => reject(err));
                  req.write(data)
                  req.end();
              });
          }
      - lang: CSharp
        source: |
          using System;
          using System.IO;
          using System.Net.Http;
          using System.Text.Json;
          using System.Threading.Tasks;

          namespace csharp
          {
              class ReturnContent{
                  public string download_url{get;set;}
                  public string status{get;set;}
              }

              class Program
              {
                  static async Task Main(string[] args)
                  {
                      var api_key = "6fa6g2pdXGIyHRhVlGh7U56Ada1eF";
                      var template_id = "79667b2b1876e347";
                      var url = $"https://rest.apitemplate.io/v2/create-image?template_id={template_id}";

                      var json_content = '{ "overrides":[ { "name":"text_1", "text":"hello world", "textBackgroundColor":"rgba(246, 243, 243, 0)" }, { "name":"text_2", "text":"Hi there" } ] }';

                      var buffer = System.Text.Encoding.UTF8.GetBytes(json_content);
                      var byteContent = new ByteArrayContent(buffer);

                      Console.WriteLine(json_content);

                      var client = new HttpClient();
                      client.DefaultRequestHeaders.Add("X-API-KEY",api_key);
                      var response = await client.PostAsync(url,byteContent);
                      var ret = await response.Content.ReadAsStringAsync();

                      var returnContent = JsonSerializer.Deserialize<ReturnContent>(ret);

                      if(returnContent.status=="success"){
                          Console.WriteLine($"Downloading {returnContent.download_url}...");
                          var download_response = await client.GetAsync(returnContent.download_url);
                          using (var stream = await download_response.Content.ReadAsStreamAsync())
                          {
                              var fileInfo = new FileInfo("image.jpeg");
                              using (var fileStream = fileInfo.OpenWrite())
                              {
                                  await stream.CopyToAsync(fileStream);
                              }
                          }
                      }
                  }
              }
            }
      x-content-type: application/json
      x-accepts: application/json
  /v2/create-pdf-from-html:
    post:
      description: |
        - This endpoint creates a PDF file from HTML with JSON data
      operationId: create-pdf-from-html
      parameters:
      - description: |
          - Either `file` or `json`(Default).
            - The option `json` returns a JSON object, and the output PDF is stored on a CDN. Use this with the parameter `expiration`
            - The option `file` returns binary data of the generated PDF(Secure and completely private) and the response HTTP header Content-Disposition is set to attachment.
        example: json
        explode: true
        in: query
        name: export_type
        required: false
        schema:
          type: string
        style: form
      - description: |
          - Expiration of the generated PDF in minutes(default to `0`, store permanently)
            - Use `0` to store on cdn permanently
            - Or use the range between `1` minute and `10080` minutes(7 days) to specify the expiration of the generated PDF
        example: 5
        explode: true
        in: query
        name: expiration
        required: false
        schema:
          type: integer
        style: form
      - description: |
          - Either `pdf`(Default) or `html`.
          - It's generating PDF by default. However, you can specify output_format=html to generate only HTML(It will return in the JSON response as download_url field as a URL).
        example: pdf
        explode: true
        in: query
        name: output_format
        required: false
        schema:
          type: string
        style: form
      - description: |
          - Default to UUID (e.g 0c93bd9e-9ebb-4634-a70f-de9131848416.pdf). Use this to specify custom file name, it should end with `.pdf`
        example: invoice_89326.pdf
        explode: true
        in: query
        name: filename
        required: false
        schema:
          type: string
        style: form
      - description: |
          - We embed the original images by default, meaning large PDF file sizes. Specifying the option 'image_resample_res' helps reduce the PDF file size by downsampling the images of the current PDF to a resolution(in DPI). Common values are 72, 96, 150, 300 and 600.
        example: "150"
        explode: true
        in: query
        name: image_resample_res
        required: false
        schema:
          type: string
        style: form
      - description: |
          - Use CMYK color profile, 1=true, 0=false. Default to '0'
        example: "0"
        explode: true
        in: query
        name: is_cmyk
        required: false
        schema:
          type: string
        style: form
      - description: |
          - Upload the generated PDFs/images to our storage CDN, default to `1`. If you have configured `Post Action` to upload the PDFs/Images to your own S3, please set it to `0`.
        example: "1"
        explode: true
        in: query
        name: cloud_storage
        required: false
        schema:
          type: integer
        style: form
      - description: |
          Default to PDF1.4. Options are PDFA1B, PDFA2 and PDFA3 (This is an experimental feature)
        explode: true
        in: query
        name: pdf_standard
        required: false
        schema:
          type: string
        style: form
      - description: |
          - This is to specify the file name for `Post Action(S3 Storage)`.
          - Please do not specify the file extension
          - Please make sure the file name is unique
          - You might use slash (/) as the folder delimiter
        explode: true
        in: query
        name: postaction_s3_filekey
        required: false
        schema:
          type: string
        style: form
      - description: |
          - This is to overwrite the AWS Bucket for `Post Action(S3 Storage)`.
        explode: true
        in: query
        name: postaction_s3_bucket
        required: false
        schema:
          type: string
        style: form
      - description: |
          - Specify an external reference ID for your own reference. It appears in the `list-objects` API.
        example: inv-iwj343jospig
        explode: true
        in: query
        name: meta
        required: false
        schema:
          type: string
        style: form
      - description: |
          - Either `1` or `0`(Default).  `0` is synchronous call(default), `1` is asynchronous call
          - To generate PDF asynchronously, set the value to `1` and the API call returns immediately. Once the PDF document is generated, we will make a HTTP/HTTPS GET to your URL(webhook_url) and will retry for 3 times before giving up.
          - If `async` is set to `1`, then `webhook_url` is mandatory
        example: "0"
        explode: true
        in: query
        name: async
        required: false
        schema:
          type: string
        style: form
      - description: |
          - It is the URL of your webhook URL, it starts with http:// or https:// and has to be urlencoded.
          - If `async` is set to `1`, then you have to specify the `webhook_url`.


          #### Format of Webhook callback

          Once the PDF is generated, we will initiate a HTTP/HTTPS GET call to the following URL:

          https://`[yourwebserver.com]`?&primary_url=`[primary_url]`&transaction_ref=`[transaction_ref]`&status=`[status]`&message=`[message]`

          - `[yourwebserver.com]`: The web services to handle the callback, which is the `webhook_url`
          - `[primary_url]`: The URL to the PDF document
          - `[transaction_ref]`: The transaction reference number
          - `[status]` : Status of the transaction, either `success` or `error`
          - `[message]` : Status message

          ***The following is a sample webhook call back to your server***

          https://yourwebserver.com?&primary_url=https%3A%2F%2Fpub-cdn.apitemplate.io%2F2021%2F06%2Fb692183d-46d7-3213-891a-460a5814ad3f.pdf&transaction_ref=b692183d-46d7-3213-891a-460a5814ad3f&status=success
        example: https://yourwebserver.com
        explode: true
        in: query
        name: webhook_url
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_pdf_from_html_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseSuccessPDFFile'
          description: Returns status and output file
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      security:
      - ApiKeyAuth: []
      summary: Create a PDF from HTML
      tags:
      - API Integration
      x-code-samples:
      - lang: Python
        source: |
          import requests, json

          def main():
              api_key = "6fa6g2pdXGIyHRhVlGh7U56Ada1eF"
              template_id = "79667b2b1876e347"

              data = {
                "body": "<h1> hello world {{name}} </h1>",
                "css": "<style>.bg{backgound: red};</style>",
                "data": {
                  "name": "This is a title"
                },
                "settings": {
                  "paper_size": "A4",
                  "orientation": "1",
                  "header_font_size": "9px",
                  "margin_top": "40",
                  "margin_right": "10",
                  "margin_bottom": "40",
                  "margin_left": "10",
                  "print_background": "1",
                  "displayHeaderFooter": true,
                  "custom_header": "<style>#header, #footer { padding: 0 !important; }</style>\n<table style=\"width: 100%; padding: 0px 5px;margin: 0px!important;font-size: 15px\">\n  <tr>\n    <td style=\"text-align:left; width:30%!important;\"><span class=\"date\"></span></td>\n    <td style=\"text-align:center; width:30%!important;\"><span class=\"pageNumber\"></span></td>\n    <td style=\"text-align:right; width:30%!important;\"><span class=\"totalPages\"></span></td>\n  </tr>\n</table>",
                  "custom_footer": "<style>#header, #footer { padding: 0 !important; }</style>\n<table style=\"width: 100%; padding: 0px 5px;margin: 0px!important;font-size: 15px\">\n  <tr>\n    <td style=\"text-align:left; width:30%!important;\"><span class=\"date\"></span></td>\n    <td style=\"text-align:center; width:30%!important;\"><span class=\"pageNumber\"></span></td>\n    <td style=\"text-align:right; width:30%!important;\"><span class=\"totalPages\"></span></td>\n  </tr>\n</table>"
                }
              }

              response = requests.post(
                  F"https://rest.apitemplate.io/v2/create-pdf-from-html",
                  headers = {"X-API-KEY": F"{api_key}"},
                  json= data
              )

          if __name__ == "__main__":
              main()
      x-content-type: application/json
      x-accepts: application/json
  /v2/create-pdf-from-url:
    post:
      description: |
        - This endpoint creates a PDF file from a URL
      operationId: create-pdf-from-url
      parameters:
      - description: |
          - Either `file` or `json`(Default).
            - The option `json` returns a JSON object, and the output PDF is stored on a CDN. Use this with the parameter `expiration`
            - The option `file` returns binary data of the generated PDF(Secure and completely private) and the response HTTP header Content-Disposition is set to attachment.
        example: json
        explode: true
        in: query
        name: export_type
        required: false
        schema:
          type: string
        style: form
      - description: |
          - Expiration of the generated PDF in minutes(default to `0`, store permanently)
            - Use `0` to store on cdn permanently
            - Or use the range between `1` minute and `10080` minutes(7 days) to specify the expiration of the generated PDF
        example: 5
        explode: true
        in: query
        name: expiration
        required: false
        schema:
          type: integer
        style: form
      - description: |
          - Either `pdf`(Default) or `html`.
          - It's generating PDF by default. However, you can specify output_format=html to generate only HTML(It will return in the JSON response as download_url field as a URL).
        example: pdf
        explode: true
        in: query
        name: output_format
        required: false
        schema:
          type: string
        style: form
      - description: |
          - Default to UUID (e.g 0c93bd9e-9ebb-4634-a70f-de9131848416.pdf). Use this to specify custom file name, it should end with `.pdf`
        example: invoice_89326.pdf
        explode: true
        in: query
        name: filename
        required: false
        schema:
          type: string
        style: form
      - description: |
          - We embed the original images by default, meaning large PDF file sizes. Specifying the option 'image_resample_res' helps reduce the PDF file size by downsampling the images of the current PDF to a resolution(in DPI). Common values are 72, 96, 150, 300 and 600.
        example: "150"
        explode: true
        in: query
        name: image_resample_res
        required: false
        schema:
          type: string
        style: form
      - description: |
          - Use CMYK color profile, 1=true, 0=false. Default to '0'
        example: "0"
        explode: true
        in: query
        name: is_cmyk
        required: false
        schema:
          type: string
        style: form
      - description: |
          - Upload the generated PDFs/images to our storage CDN, default to `1`. If you have configured `Post Action` to upload the PDFs/Images to your own S3, please set it to `0`.
        example: "1"
        explode: true
        in: query
        name: cloud_storage
        required: false
        schema:
          type: integer
        style: form
      - description: |
          Default to PDF1.4. Options are PDFA1B, PDFA2 and PDFA3 (This is an experimental feature)
        explode: true
        in: query
        name: pdf_standard
        required: false
        schema:
          type: string
        style: form
      - description: |
          - This is to specify the file name for `Post Action(S3 Storage)`.
          - Please do not specify the file extension
          - Please make sure the file name is unique
          - You might use slash (/) as the folder delimiter
        explode: true
        in: query
        name: postaction_s3_filekey
        required: false
        schema:
          type: string
        style: form
      - description: |
          - This is to overwrite the AWS Bucket for `Post Action(S3 Storage)`.
        explode: true
        in: query
        name: postaction_s3_bucket
        required: false
        schema:
          type: string
        style: form
      - description: |
          - Specify an external reference ID for your own reference. It appears in the `list-objects` API.
        example: inv-iwj343jospig
        explode: true
        in: query
        name: meta
        required: false
        schema:
          type: string
        style: form
      - description: |
          - Either `1` or `0`(Default).  `0` is synchronous call(default), `1` is asynchronous call
          - To generate PDF asynchronously, set the value to `1` and the API call returns immediately. Once the PDF document is generated, we will make a HTTP/HTTPS GET to your URL(webhook_url) and will retry for 3 times before giving up.
          - If `async` is set to `1`, then `webhook_url` is mandatory
        example: "0"
        explode: true
        in: query
        name: async
        required: false
        schema:
          type: string
        style: form
      - description: |
          - It is the URL of your webhook URL, it starts with http:// or https:// and has to be urlencoded.
          - If `async` is set to `1`, then you have to specify the `webhook_url`.


          #### Format of Webhook callback

          Once the PDF is generated, we will initiate a HTTP/HTTPS GET call to the following URL:

          https://`[yourwebserver.com]`?&primary_url=`[primary_url]`&transaction_ref=`[transaction_ref]`&status=`[status]`&message=`[message]`

          - `[yourwebserver.com]`: The web services to handle the callback, which is the `webhook_url`
          - `[primary_url]`: The URL to the PDF document
          - `[transaction_ref]`: The transaction reference number
          - `[status]` : Status of the transaction, either `success` or `error`
          - `[message]` : Status message

          ***The following is a sample webhook call back to your server***

          https://yourwebserver.com?&primary_url=https%3A%2F%2Fpub-cdn.apitemplate.io%2F2021%2F06%2Fb692183d-46d7-3213-891a-460a5814ad3f.pdf&transaction_ref=b692183d-46d7-3213-891a-460a5814ad3f&status=success
        example: https://yourwebserver.com
        explode: true
        in: query
        name: webhook_url
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_pdf_from_url_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseSuccessPDFFile'
          description: Returns status and output file
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      security:
      - ApiKeyAuth: []
      summary: Create a PDF from URL
      tags:
      - API Integration
      x-code-samples:
      - lang: Python
        source: |
          import requests, json

          def main():
              api_key = "6fa6g2pdXGIyHRhVlGh7U56Ada1eF"
              template_id = "79667b2b1876e347"

              data = {
                "url": "https://en.wikipedia.org/wiki/Sceloporus_malachiticus",
                "settings": {
                  "paper_size": "A4",
                  "orientation": "1",
                  "header_font_size": "9px",
                  "margin_top": "40",
                  "margin_right": "10",
                  "margin_bottom": "40",
                  "margin_left": "10",
                  "print_background": "1",
                  "displayHeaderFooter": true,
                  "custom_header": "<style>#header, #footer { padding: 0 !important; }</style>\n<table style=\"width: 100%; padding: 0px 5px;margin: 0px!important;font-size: 15px\">\n  <tr>\n    <td style=\"text-align:left; width:30%!important;\"><span class=\"date\"></span></td>\n    <td style=\"text-align:center; width:30%!important;\"><span class=\"pageNumber\"></span></td>\n    <td style=\"text-align:right; width:30%!important;\"><span class=\"totalPages\"></span></td>\n  </tr>\n</table>",
                  "custom_footer": "<style>#header, #footer { padding: 0 !important; }</style>\n<table style=\"width: 100%; padding: 0px 5px;margin: 0px!important;font-size: 15px\">\n  <tr>\n    <td style=\"text-align:left; width:30%!important;\"><span class=\"date\"></span></td>\n    <td style=\"text-align:center; width:30%!important;\"><span class=\"pageNumber\"></span></td>\n    <td style=\"text-align:right; width:30%!important;\"><span class=\"totalPages\"></span></td>\n  </tr>\n</table>"
                }
              }

              response = requests.post(
                  F"https://rest.apitemplate.io/v2/create-pdf-from-url",
                  headers = {"X-API-KEY": F"{api_key}"},
                  json= data
              )

          if __name__ == "__main__":
              main()
      x-content-type: application/json
      x-accepts: application/json
  /v2/list-objects:
    get:
      description: |
        Retrieves all the generated PDFs and images
      operationId: list-objects
      parameters:
      - description: Retrieve only the number of records specified. Default to 300
        example: 300
        explode: true
        in: query
        name: limit
        required: false
        schema:
          type: string
        style: form
      - description: Offset is used to skip the number of records from the results.
          Default to 0
        example: 0
        explode: true
        in: query
        name: offset
        required: false
        schema:
          type: string
        style: form
      - description: Filtered by template id
        example: 00377b2b1e0ee394
        explode: true
        in: query
        name: template_id
        required: false
        schema:
          type: string
        style: form
      - description: "Filtered by transaction type, options are `PDF`, `JPEG` or `MERGE`"
        example: MERGE
        explode: true
        in: query
        name: transaction_type
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseSuccessListObjects'
          description: Returns status and output file
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      security:
      - ApiKeyAuth: []
      summary: List Generated Objects
      tags:
      - API Integration
      x-code-samples:
      - lang: cURL
        source: |
          curl --header "Content-Type: application/json" \
          -H 'X-API-KEY: 6fa6g2pdXGIyHRhVlGh7U56Ada1eF' \
          "https://rest.apitemplate.io/v2/list-objects"
      - lang: Python
        source: |
          import requests, json

          def main():
              api_key = "6fa6g2pdXGIyHRhVlGh7U56Ada1eF"

              response = requests.get(
                  F"https://rest.apitemplate.io/v2/list-objects",
                  headers = {"X-API-KEY": F"{api_key}"},
              )

          if __name__ == "__main__":
              main()
      - lang: PHP
        source: |
          <?php
              function list_objects($api_key) {
                  $url = "https://rest.apitemplate.io/v2/list-objects";
                  $headers = array("X-API-KEY: ".$api_key);
                  $curl = curl_init();
                  curl_setopt($curl, CURLOPT_FOLLOWLOCATION, true);
                  curl_setopt($curl, CURLOPT_URL, $url);
                  curl_setopt($curl, CURLOPT_HTTPHEADER, $headers);
                  curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
                  $result = curl_exec($curl);
                  curl_close($curl);
                  if (!$result) {
                      return null;
                  }else{
                      $json_result = json_decode($result, 1);
                      return $json_result;
                  }
              }


              $api_key = "6fa6g2pdXGIyxHRhVlGh7U5Vhdckt";
              print_r(list_objects($api_key));
          ?>
      - lang: Node.js
        source: |
          const https = require('https');
          const http = require('http');
          const { URL } = require('url');

          (async () => {
              let resp = await httpGet(
                  'https://rest.apitemplate.io/v2/list-objects',
                  'f6caMToxOjRySHV6dTRldU9JTVNobDg'
              );
              console.log(resp);
          })();

          async function httpGet(url_api, apiKey){
              const uri = new URL(url_api);
              const fx = uri.protocol === 'https:' ? https : http;
              const opts = {
                  method: 'GET',
                  hostname: uri.hostname,
                  port: uri.port,
                  path: `${uri.pathname}${uri.search==null?"":uri.search}`,
                  protocol: uri.protocol,
                  headers: {
                      "X-API-KEY": apiKey
                  }
              };

              return new Promise((resolve, reject) => {
                  const req = fx.get(opts, (res) => {
                      res.setEncoding('utf8');
                      let responseBody = '';
                      res.on('data', (chunk) => responseBody += chunk);
                      res.on('end', () =>resolve(responseBody));
                  });
                  req.on('error', (err) => reject(err));
              });
          }
      x-accepts: application/json
  /v2/delete-object:
    get:
      description: |
        Delete a PDF or an image from CDN and mark the transaction as deleted
      operationId: delete-object
      parameters:
      - description: Object transaction reference
        example: 1618d386-2343-3d234-b9c7-99c82bb9f104
        explode: true
        in: query
        name: transaction_ref
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseSuccessDeleteObject'
          description: Returns status and output file
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      security:
      - ApiKeyAuth: []
      summary: Delete an Object
      tags:
      - API Integration
      x-code-samples:
      - lang: cURL
        source: |
          curl --header "Content-Type: application/json" \
          -H 'X-API-KEY: 6fa6g2pdXGIyHRhVlGh7U56Ada1eF' \
          "https://rest.apitemplate.io/v2/delete-object?transaction_ref=1618d386-2343-3d234-b9c7-99c82bb9f104"
      - lang: Python
        source: |
          import requests, json

          def main():
              api_key = "6fa6g2pdXGIyHRhVlGh7U56Ada1eF"

              response = requests.get(
                  F"https://rest.apitemplate.io/v2/delete-object?transaction_ref=1618d386-2343-3d234-b9c7-99c82bb9f104",
                  headers = {"X-API-KEY": F"{api_key}"},
              )

          if __name__ == "__main__":
              main()
      - lang: PHP
        source: |
          <?php
              function delete_object($api_key, $trans_ref) {
                  $url = "https://rest.apitemplate.io/v2/delete-object?transaction_ref=". $trans_ref;
                  $headers = array("X-API-KEY: ".$api_key);
                  $curl = curl_init();
                  curl_setopt($curl, CURLOPT_FOLLOWLOCATION, true);
                  curl_setopt($curl, CURLOPT_URL, $url);
                  curl_setopt($curl, CURLOPT_HTTPHEADER, $headers);
                  curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
                  $result = curl_exec($curl);
                  curl_close($curl);
                  if (!$result) {
                      return null;
                  }else{
                      $json_result = json_decode($result, 1);
                      return $json_result;
                  }
              }


              $api_key = "6fa6g2pdXGIyxHRhVlGh7U5Vhdckt";
              $trans_ref = "1618d386-2343-3d234-b9c7-99c82bb9f104";
              print_r(delete_object($api_key,$trans_ref));
          ?>
      - lang: Node.js
        source: |
          const https = require('https');
          const http = require('http');
          const { URL } = require('url');

          (async () => {
              let resp = await httpGet(
                  'https://rest.apitemplate.io/v2/delete-object?transaction_ref=1618d386-2343-3d234-b9c7-99c82bb9f104',
                  'f6caMToxOjRySHV6dTRldU9JTVNobDg'
              );
              console.log(resp);
          })();

          async function httpGet(url_api, apiKey){
              const uri = new URL(url_api);
              const fx = uri.protocol === 'https:' ? https : http;
              const opts = {
                  method: 'GET',
                  hostname: uri.hostname,
                  port: uri.port,
                  path: `${uri.pathname}${uri.search==null?"":uri.search}`,
                  protocol: uri.protocol,
                  headers: {
                      "X-API-KEY": apiKey
                  }
              };

              return new Promise((resolve, reject) => {
                  const req = fx.get(opts, (res) => {
                      res.setEncoding('utf8');
                      let responseBody = '';
                      res.on('data', (chunk) => responseBody += chunk);
                      res.on('end', () =>resolve(responseBody));
                  });
                  req.on('error', (err) => reject(err));
              });
          }
      x-accepts: application/json
  /v2/list-templates:
    get:
      description: |
        Retrieves the information of templates
      operationId: list-templates
      parameters:
      - description: Retrieve only the number of records specified. Default to 300
        example: "300"
        explode: true
        in: query
        name: limit
        required: false
        schema:
          type: string
        style: form
      - description: Offset is used to skip the number of records from the results.
          Default to 0
        example: "0"
        explode: true
        in: query
        name: offset
        required: false
        schema:
          type: string
        style: form
      - description: To filter the templates by either 'PDF' or 'JPEG'
        example: JPEG
        explode: true
        in: query
        name: format
        required: false
        schema:
          type: string
        style: form
      - description: To filter the templates by template id
        example: 00377b2b1e0ee394
        explode: true
        in: query
        name: template_id
        required: false
        schema:
          type: string
        style: form
      - description: To filter the templates by the group name
        example: custom
        explode: true
        in: query
        name: group_name
        required: false
        schema:
          type: string
        style: form
      - description: "Return along with layer information for image templates, 0=false\
          \ , 1=true. Default to '0'"
        example: 0
        explode: true
        in: query
        name: with_layer_info
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseSuccessListTemplates'
          description: Returns status and output file
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      security:
      - ApiKeyAuth: []
      summary: List Templates
      tags:
      - Template Management
      x-code-samples:
      - lang: cURL
        source: |
          curl --header "Content-Type: application/json" \
          -H 'X-API-KEY: 6fa6g2pdXGIyHRhVlGh7U56Ada1eF' \
          "https://rest.apitemplate.io/v2/list-templates"
      - lang: Python
        source: |
          import requests, json

          def main():
              api_key = "6fa6g2pdXGIyHRhVlGh7U56Ada1eF"

              response = requests.get(
                  F"https://rest.apitemplate.io/v2/list-templates",
                  headers = {"X-API-KEY": F"{api_key}"},
              )

          if __name__ == "__main__":
              main()
      - lang: PHP
        source: |
          <?php
              function list_templates($api_key) {
                  $url = "https://rest.apitemplate.io/v2/list-templates";
                  $headers = array("X-API-KEY: ".$api_key);
                  $curl = curl_init();
                  curl_setopt($curl, CURLOPT_FOLLOWLOCATION, true);
                  curl_setopt($curl, CURLOPT_URL, $url);
                  curl_setopt($curl, CURLOPT_HTTPHEADER, $headers);
                  curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
                  $result = curl_exec($curl);
                  curl_close($curl);
                  if (!$result) {
                      return null;
                  }else{
                      $json_result = json_decode($result, 1);
                      return $json_result;
                  }
              }


              $api_key = "6fa6g2pdXGIyxHRhVlGh7U5Vhdckt";
              print_r(list_templates($api_key));
          ?>
      - lang: Node.js
        source: |
          const https = require('https');
          const http = require('http');
          const { URL } = require('url');

          (async () => {
              let resp = await httpGet(
                  'https://rest.apitemplate.io/v2/list-templates',
                  'f6caMToxOjRySHV6dTRldU9JTVNobDg'
              );
              console.log(resp);
          })();

          async function httpGet(url_api, apiKey){
              const uri = new URL(url_api);
              const fx = uri.protocol === 'https:' ? https : http;
              const opts = {
                  method: 'GET',
                  hostname: uri.hostname,
                  port: uri.port,
                  path: `${uri.pathname}${uri.search==null?"":uri.search}`,
                  protocol: uri.protocol,
                  headers: {
                      "X-API-KEY": apiKey
                  }
              };

              return new Promise((resolve, reject) => {
                  const req = fx.get(opts, (res) => {
                      res.setEncoding('utf8');
                      let responseBody = '';
                      res.on('data', (chunk) => responseBody += chunk);
                      res.on('end', () =>resolve(responseBody));
                  });
                  req.on('error', (err) => reject(err));
              });
          }
      x-accepts: application/json
  /v2/get-template:
    get:
      description: |
        Retrieves information of the PDF template (**This is an experimental API, contact support to learn more**)
      operationId: get-template
      parameters:
      - description: "Your template id, it can be obtained in the web console(Manage\
          \ Templates)"
        example: 00377b2b1e0ee394
        explode: true
        in: query
        name: template_id
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseSuccessTemplate'
          description: Returns status and template information
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      security:
      - ApiKeyAuth: []
      summary: Get PDF template
      tags:
      - Template Management
      x-code-samples:
      - lang: cURL
        source: |
          curl --header "Content-Type: application/json" \
          -H 'X-API-KEY: 6fa6g2pdXGIyHRhVlGh7U56Ada1eF' \
          "https://rest.apitemplate.io/v2/get-template?template_id=cd890b2b199c5c42"
      x-accepts: application/json
  /v2/update-template:
    post:
      description: "This endpoint updates PDF template (**This is an experimental\
        \ API, contact support to learn more**)"
      operationId: update-template
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update_template_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseSuccess'
          description: Returns status and output file
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      security:
      - ApiKeyAuth: []
      summary: Update PDF Template
      tags:
      - Template Management
      x-code-samples:
      - lang: cURL
        source: |
          curl -X POST \
            --header "Content-Type: application/json"  \
            -H 'X-API-KEY: 6fa6g2pdXGIyHRhVlGh7U56Ada1eF' \
            --data '{"template_id": "d4477b2b2348d03a","body":"<h1>this is a title</h1>"}' \
            "https://rest.apitemplate.io/v2/update-template"
      x-content-type: application/json
      x-accepts: application/json
  /v2/merge-pdfs:
    post:
      description: This endpoint merges/joins multiple PDF URLs into a single PDF
        file
      operationId: merge-pdfs
      parameters:
      - description: |
          - This is to specify the file name for `Post Action(S3 Storage)`.
          - Please do not specify the file extension
          - Please make sure the file name is unique
          - You might use slash (/) as the folder delimiter
        explode: true
        in: query
        name: postaction_s3_filekey
        required: false
        schema:
          type: string
        style: form
      - description: |
          - This is to overwrite the AWS Bucket for `Post Action(S3 Storage)`.
        explode: true
        in: query
        name: postaction_s3_bucket
        required: false
        schema:
          type: string
        style: form
      - description: |
          - Specify an external reference ID for your own reference. It appears in the `list-objects` API.
        example: inv-iwj343jospig
        explode: true
        in: query
        name: meta
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/merge_pdfs_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseSuccessSingleFile'
          description: Returns status and output file
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      security:
      - ApiKeyAuth: []
      summary: Join/Merge multiple PDFs
      tags:
      - PDF Manipulation API
      x-code-samples:
      - lang: cURL
        source: |
          curl -X POST \
            --header "Content-Type: application/json"  \
            -H 'X-API-KEY: 6fa6g2pdXGIyHRhVlGh7U56Ada1eF' \
            --data '{ "urls": ["https://fileserver.com/a1.pdf","https://fileserver.com/b2.pdf"] }' \
            "https://rest.apitemplate.io/v2/merge-pdfs"
      - lang: Python
        source: |
          import requests, json

          def main():
              api_key = "6fa6g2pdXGIyHRhVlGh7U56Ada1eF"

              json_payload = {
                "urls": ["https://fileserver.com/a1.pdf","https://fileserver.com/b2.pdf"] ,
                "output_file": "output.pdf",
              }

              response = requests.post(
                  F"https://rest.apitemplate.io/v2/merge-pdfs",
                  headers = {"X-API-KEY": F"{api_key}"},
                  json = json_payload
              )

              print(response.content)

          if __name__ == "__main__":
              main()
      x-content-type: application/json
      x-accepts: application/json
components:
  parameters:
    paramTemplateID:
      description: "Your template id, it can be obtained in the web console"
      example: 00377b2b1e0ee394
      explode: true
      in: query
      name: template_id
      required: true
      schema:
        type: string
      style: form
    paramExportType:
      description: |
        - Either `file` or `json`(Default).
          - The option `json` returns a JSON object, and the output PDF is stored on a CDN. Use this with the parameter `expiration`
          - The option `file` returns binary data of the generated PDF(Secure and completely private) and the response HTTP header Content-Disposition is set to attachment.
      example: json
      explode: true
      in: query
      name: export_type
      required: false
      schema:
        type: string
      style: form
    paramExpiration:
      description: |
        - Expiration of the generated PDF in minutes(default to `0`, store permanently)
          - Use `0` to store on cdn permanently
          - Or use the range between `1` minute and `10080` minutes(7 days) to specify the expiration of the generated PDF
      example: 5
      explode: true
      in: query
      name: expiration
      required: false
      schema:
        type: integer
      style: form
    paramOutputHTML:
      description: |
        - Either `1` or `0`(Default).
        - To enable output of html content, set the value to `1` and it will return in the JSON response as html_url field (as a URL)
      example: "0"
      explode: true
      in: query
      name: output_html
      required: false
      schema:
        type: string
      style: form
    paramOutputFormat:
      description: |
        - Either `pdf`(Default) or `html`.
        - It's generating PDF by default. However, you can specify output_format=html to generate only HTML(It will return in the JSON response as download_url field as a URL).
      example: pdf
      explode: true
      in: query
      name: output_format
      required: false
      schema:
        type: string
      style: form
    paramFileName:
      description: |
        - Default to UUID (e.g 0c93bd9e-9ebb-4634-a70f-de9131848416.pdf). Use this to specify custom file name, it should end with `.pdf`
      example: invoice_89326.pdf
      explode: true
      in: query
      name: filename
      required: false
      schema:
        type: string
      style: form
    paramImageResampleRes:
      description: |
        - We embed the original images by default, meaning large PDF file sizes. Specifying the option 'image_resample_res' helps reduce the PDF file size by downsampling the images of the current PDF to a resolution(in DPI). Common values are 72, 96, 150, 300 and 600.
      example: "150"
      explode: true
      in: query
      name: image_resample_res
      required: false
      schema:
        type: string
      style: form
    paramIsCMYK:
      description: |
        - Use CMYK color profile, 1=true, 0=false. Default to '0'
      example: "0"
      explode: true
      in: query
      name: is_cmyk
      required: false
      schema:
        type: string
      style: form
    paramCloudStorage:
      description: |
        - Upload the generated PDFs/images to our storage CDN, default to `1`. If you have configured `Post Action` to upload the PDFs/Images to your own S3, please set it to `0`.
      example: "1"
      explode: true
      in: query
      name: cloud_storage
      required: false
      schema:
        type: integer
      style: form
    paramPDFStandard:
      description: |
        Default to PDF1.4. Options are PDFA1B, PDFA2 and PDFA3 (This is an experimental feature)
      explode: true
      in: query
      name: pdf_standard
      required: false
      schema:
        type: string
      style: form
    paramPOSTACTIONS3FILEKEY:
      description: |
        - This is to specify the file name for `Post Action(S3 Storage)`.
        - Please do not specify the file extension
        - Please make sure the file name is unique
        - You might use slash (/) as the folder delimiter
      explode: true
      in: query
      name: postaction_s3_filekey
      required: false
      schema:
        type: string
      style: form
    paramPOSTACTIONS3BUCKET:
      description: |
        - This is to overwrite the AWS Bucket for `Post Action(S3 Storage)`.
      explode: true
      in: query
      name: postaction_s3_bucket
      required: false
      schema:
        type: string
      style: form
    paramMeta:
      description: |
        - Specify an external reference ID for your own reference. It appears in the `list-objects` API.
      example: inv-iwj343jospig
      explode: true
      in: query
      name: meta
      required: false
      schema:
        type: string
      style: form
    paramAsync:
      description: |
        - Either `1` or `0`(Default).  `0` is synchronous call(default), `1` is asynchronous call
        - To generate PDF asynchronously, set the value to `1` and the API call returns immediately. Once the PDF document is generated, we will make a HTTP/HTTPS GET to your URL(webhook_url) and will retry for 3 times before giving up.
        - If `async` is set to `1`, then `webhook_url` is mandatory
      example: "0"
      explode: true
      in: query
      name: async
      required: false
      schema:
        type: string
      style: form
    paramWebhook:
      description: |
        - It is the URL of your webhook URL, it starts with http:// or https:// and has to be urlencoded.
        - If `async` is set to `1`, then you have to specify the `webhook_url`.


        #### Format of Webhook callback

        Once the PDF is generated, we will initiate a HTTP/HTTPS GET call to the following URL:

        https://`[yourwebserver.com]`?&primary_url=`[primary_url]`&transaction_ref=`[transaction_ref]`&status=`[status]`&message=`[message]`

        - `[yourwebserver.com]`: The web services to handle the callback, which is the `webhook_url`
        - `[primary_url]`: The URL to the PDF document
        - `[transaction_ref]`: The transaction reference number
        - `[status]` : Status of the transaction, either `success` or `error`
        - `[message]` : Status message

        ***The following is a sample webhook call back to your server***

        https://yourwebserver.com?&primary_url=https%3A%2F%2Fpub-cdn.apitemplate.io%2F2021%2F06%2Fb692183d-46d7-3213-891a-460a5814ad3f.pdf&transaction_ref=b692183d-46d7-3213-891a-460a5814ad3f&status=success
      example: https://yourwebserver.com
      explode: true
      in: query
      name: webhook_url
      required: false
      schema:
        type: string
      style: form
  schemas:
    Error:
      properties:
        status:
          description: "Value of the status: error"
          example: error
          type: string
        message:
          description: Error message
          example: This is an error message
          type: string
      required:
      - message
      - status
      type: object
    ResponseSuccess:
      example:
        status: success
      properties:
        status:
          description: Status
          example: success
          type: string
      type: object
    ResponseSuccessTemplate:
      example:
        settings: "{\"paper_size\":\"A4\",\"orientation\":\"1\",\"print_background\"\
          :\"1\",\"margin_top\":\"40\",\"margin_bottom\":\"40\",\"margin_right\":\"\
          40\",\"margin_left\":\"40\",\"header_right\":\"{{pageNumber}}/{{totalPages}}\"\
          ,\"footer_center\":\"{{pageNumber}}/{{totalPages}}\",\"header_center\":\"\
          Sample Invoice\",\"header_font_size\":\"11px\",\"header_left\":\"{{date}}\"\
          ,\"footer_left\":\"{{date}}\",\"custom_header\":\"\",\"footer_font_size\"\
          :\"11px\"}"
        css: "body{background: white}"
        template_id: cd890b2b199c5c42
        body: <h1>Title</h1>
        status: success
      properties:
        status:
          description: Status
          example: success
          type: string
        template_id:
          description: Template ID
          example: cd890b2b199c5c42
          type: string
        body:
          description: HTML body of the template
          example: <h1>Title</h1>
          type: string
        css:
          description: CSS of the template
          example: "body{background: white}"
          type: string
        settings:
          description: Print settings of the template
          example: "{\"paper_size\":\"A4\",\"orientation\":\"1\",\"print_background\"\
            :\"1\",\"margin_top\":\"40\",\"margin_bottom\":\"40\",\"margin_right\"\
            :\"40\",\"margin_left\":\"40\",\"header_right\":\"{{pageNumber}}/{{totalPages}}\"\
            ,\"footer_center\":\"{{pageNumber}}/{{totalPages}}\",\"header_center\"\
            :\"Sample Invoice\",\"header_font_size\":\"11px\",\"header_left\":\"{{date}}\"\
            ,\"footer_left\":\"{{date}}\",\"custom_header\":\"\",\"footer_font_size\"\
            :\"11px\"}"
          type: string
      type: object
    ResponseSuccessPDFFile:
      example:
        download_url: https://bucket.s3.amazonaws.com/91f62769-69e4-48bf.pdf
        template_id: cd890b2b199c5c42
        total_pages: 4
        status: success
        transaction_ref: a0430897-2c94-40e1-a09b-57403d811ceb
        post_actions:
        - action: S3
          name: S3 Storage
          bucket: alphacloud-test-bucket
          status: success
          file: s3://alphacloud-test-bucket/ab2e1bf7-cefa-42c7-929f-38d92b8bf8bf.pdf
      properties:
        status:
          description: Status
          example: success
          type: string
        download_url:
          description: Download URL
          example: https://bucket.s3.amazonaws.com/91f62769-69e4-48bf.pdf
          type: string
        template_id:
          description: Template ID
          example: cd890b2b199c5c42
          type: string
        total_pages:
          description: Page count
          example: 4
          type: integer
        transaction_ref:
          description: Transaction reference
          example: a0430897-2c94-40e1-a09b-57403d811ceb
          type: string
        post_actions:
          example:
          - action: S3
            name: S3 Storage
            bucket: alphacloud-test-bucket
            status: success
            file: s3://alphacloud-test-bucket/ab2e1bf7-cefa-42c7-929f-38d92b8bf8bf.pdf
          items:
            $ref: '#/components/schemas/ResponseSuccessPDFFile_post_actions_inner'
          type: array
      type: object
    ResponseSuccessImageFile:
      example:
        download_url: https://bucket.s3.amazonaws.com/91f62769-69e4-48bf.jpeg
        template_id: cd890b2b199c5c42
        status: success
        download_url_png: https://bucket.s3.amazonaws.com/91f62769-69e4-48bf.png
        transaction_ref: a0430897-2c94-40e1-a09b-57403d811ceb
        post_actions:
        - action: S3
          name: S3 Storage
          bucket: alphacloud-test-bucket
          status: success
          file: s3://alphacloud-test-bucket/91f62769-69e4-48bf.png
        - action: S3
          name: S3 Storage
          bucket: alphacloud-test-bucket
          status: success
          file: s3://alphacloud-test-bucket/91f62769-69e4-48bf.jpg
      properties:
        status:
          description: Status
          example: success
          type: string
        download_url:
          description: Download URL
          example: https://bucket.s3.amazonaws.com/91f62769-69e4-48bf.jpeg
          type: string
        download_url_png:
          description: Download URL PNG
          example: https://bucket.s3.amazonaws.com/91f62769-69e4-48bf.png
          type: string
        template_id:
          description: Template ID
          example: cd890b2b199c5c42
          type: string
        transaction_ref:
          description: Transaction reference
          example: a0430897-2c94-40e1-a09b-57403d811ceb
          type: string
        post_actions:
          example:
          - action: S3
            name: S3 Storage
            bucket: alphacloud-test-bucket
            status: success
            file: s3://alphacloud-test-bucket/91f62769-69e4-48bf.png
          - action: S3
            name: S3 Storage
            bucket: alphacloud-test-bucket
            status: success
            file: s3://alphacloud-test-bucket/91f62769-69e4-48bf.jpg
          items:
            $ref: '#/components/schemas/ResponseSuccessPDFFile_post_actions_inner'
          type: array
      type: object
    ResponseSuccessListTemplates:
      example:
        templates:
        - template_id: 12577b29420496
          name: Positive Review
          status: ACTIVE
          format: JPEG
          created_at: 2021-10-15T06:29:01.308Z
          updated_at: 2021-10-15T13:03:43.615Z
          group_name: ""
        - template_id: 004271e0ee394
          name: Test Template PDF
          status: ACTIVE
          format: PDF
          created_at: 2021-10-09T09:57:52.224Z
          updated_at: 2021-10-16T11:18:10.613Z
          group_name: ""
        - template_id: 8bf77213e06b670
          name: New Template
          status: ACTIVE
          format: PDF
          created_at: 2021-10-09T08:54:49.486Z
          updated_at: 2021-10-09T09:54:44.667Z
          group_name: ""
        status: success
      properties:
        status:
          example: success
          type: string
        templates:
          example:
          - template_id: 12577b29420496
            name: Positive Review
            status: ACTIVE
            format: JPEG
            created_at: 2021-10-15T06:29:01.308Z
            updated_at: 2021-10-15T13:03:43.615Z
            group_name: ""
          - template_id: 004271e0ee394
            name: Test Template PDF
            status: ACTIVE
            format: PDF
            created_at: 2021-10-09T09:57:52.224Z
            updated_at: 2021-10-16T11:18:10.613Z
            group_name: ""
          - template_id: 8bf77213e06b670
            name: New Template
            status: ACTIVE
            format: PDF
            created_at: 2021-10-09T08:54:49.486Z
            updated_at: 2021-10-09T09:54:44.667Z
            group_name: ""
          items:
            $ref: '#/components/schemas/ResponseSuccessListTemplates_templates_inner'
          type: array
      type: object
    ResponseSuccessListObjects:
      example:
        objects:
        - transaction_ref: e9c46f03-1840-44dc-bae7-f280e0be98a9
          description: null
          source: null
          meta: inv-23ejh23bh
          transaction_type: JPEG
          primary_url: https://pub-cdn.apitemplate.io/e9c46f03-1840-44dc-bae7-f280e0be98a9.jpeg
          secondary_url: https://pub-cdn.apitemplate.io/e9c46f03-1840-44dc-bae7-f280e0be98a9.png
          deleted_at: null
          deletion_status: 0
          ip_address: 1.222.242.231
          created_at: 2021-10-16T12:08:59.281Z
        - transaction_ref: c973f544-fb56-465d-a1bd-35ff0e4b77e7
          description: null
          source: null
          meta: inv-45ekdjkdbh
          transaction_type: PDF
          primary_url: https://pub-cdn.apitemplate.io/2021/10/c973f544-fb56-465d-a1bd-35ff0e4b77e7.pdf
          secondary_url: ""
          deleted_at: null
          deletion_status: 0
          ip_address: 1.222.242.231
          created_at: 2021-10-16T12:07:34.478Z
        - transaction_ref: 5ee5e0aa-4431-4d17-b94a-24ac859a5e71
          description: null
          source: null
          meta: inv-klkjbr34ded
          transaction_type: JPEG
          primary_url: https://pub-cdn.apitemplate.io/5ee5e0aa-4431-4d17-b94a-24ac859a5e71.jpeg
          secondary_url: https://pub-cdn.apitemplate.io/5ee5e0aa-4431-4d17-b94a-24ac859a5e71.png
          deleted_at: null
          deletion_status: 0
          ip_address: 1.222.242.231
          created_at: 2021-10-16T12:05:59.111Z
        status: success
      properties:
        status:
          example: success
          type: string
        objects:
          example:
          - transaction_ref: e9c46f03-1840-44dc-bae7-f280e0be98a9
            description: null
            source: null
            meta: inv-23ejh23bh
            transaction_type: JPEG
            primary_url: https://pub-cdn.apitemplate.io/e9c46f03-1840-44dc-bae7-f280e0be98a9.jpeg
            secondary_url: https://pub-cdn.apitemplate.io/e9c46f03-1840-44dc-bae7-f280e0be98a9.png
            deleted_at: null
            deletion_status: 0
            ip_address: 1.222.242.231
            created_at: 2021-10-16T12:08:59.281Z
          - transaction_ref: c973f544-fb56-465d-a1bd-35ff0e4b77e7
            description: null
            source: null
            meta: inv-45ekdjkdbh
            transaction_type: PDF
            primary_url: https://pub-cdn.apitemplate.io/2021/10/c973f544-fb56-465d-a1bd-35ff0e4b77e7.pdf
            secondary_url: ""
            deleted_at: null
            deletion_status: 0
            ip_address: 1.222.242.231
            created_at: 2021-10-16T12:07:34.478Z
          - transaction_ref: 5ee5e0aa-4431-4d17-b94a-24ac859a5e71
            description: null
            source: null
            meta: inv-klkjbr34ded
            transaction_type: JPEG
            primary_url: https://pub-cdn.apitemplate.io/5ee5e0aa-4431-4d17-b94a-24ac859a5e71.jpeg
            secondary_url: https://pub-cdn.apitemplate.io/5ee5e0aa-4431-4d17-b94a-24ac859a5e71.png
            deleted_at: null
            deletion_status: 0
            ip_address: 1.222.242.231
            created_at: 2021-10-16T12:05:59.111Z
          items:
            type: object
          properties:
            transaction_ref:
              type: string
            description:
              type: string
            source:
              type: string
            meta:
              type: string
            transaction_type:
              type: string
            primary_url:
              type: string
            secondary_url:
              type: string
            deleted_at:
              type: string
            deletion_status:
              type: integer
            ip_address:
              type: string
            created_at:
              type: string
          type: array
      type: object
    ResponseSuccessDeleteObject:
      example:
        status: success
        transaction_ref: 1618d386-2343-3d234-b9c7-99c82bb9f104
      properties:
        status:
          example: success
          type: string
        transaction_ref:
          example: 1618d386-2343-3d234-b9c7-99c82bb9f104
      type: object
    ResponseSuccessSingleFile:
      example:
        total_pages: 4
        primary_url: https://craftmypdf.com/output.pdf
        status: success
        transaction_ref: a0430897-2c94-40e1-a09b-57403d811ceb
      properties:
        status:
          description: Status
          example: success
          type: string
        primary_url:
          description: Generated PDF document
          example: https://craftmypdf.com/output.pdf
          type: string
        total_pages:
          description: Page count
          example: 4
          type: integer
        transaction_ref:
          description: Transaction reference
          example: a0430897-2c94-40e1-a09b-57403d811ceb
          type: string
      type: object
    ResponseSuccessQueryImageTemplate:
      properties:
        status:
          description: Status
          example: success
          type: string
        width:
          description: Width
          example: 1024
          type: integer
        height:
          description: Height
          example: 1024
          type: integer
        layers:
          description: Array of layers
          example: |
            [
            {
                "name": "text_1",
                "type": "textbox",
                "subtype": "textbox",
                "y": 50,
                "x": 50,
                "width": 629.82,
                "height": 406.8,
                "fontSize": 120,
                "fontWeight": "normal",
                "fontFamily": "Anton",
                "fontStyle": "normal",
                "text": "Type ~something~ ::here::",
                "stroke": null,
                "strokeWidth": 0,
                "opacity": 1,
                "backgroundColor": "",
                "textAlign": "left",
                "splitByGrapheme": false,
                "textBackgroundColor": "rgba(246, 243, 243, 0)",
                "color": "#FFB029"
            },
            {
                "name": "rect_1",
                "type": "rect",
                "subtype": "rect",
                "y": 101.9,
                "x": 708.82,
                "width": 300,
                "height": 300,
                "stroke": "grey",
                "strokeWidth": 3,
                "opacity": 1,
                "backgroundColor": "",
                "color": "#BEF4FF"
            }
            ]
          items:
            type: object
          type: array
      type: object
    PDFGenerationSettingsObject:
      description: |
        The settings object contains various properties to configure the PDF generation.
      example:
        paper_size: A4
        orientation: "1"
        header_font_size: 9px
        margin_top: "40"
        margin_right: "10"
        margin_bottom: "40"
        margin_left: "10"
        print_background: "1"
        displayHeaderFooter: true
        custom_header: |-
          <style>#header, #footer { padding: 0 !important; }</style>
          <table style="width: 100%; padding: 0px 5px;margin: 0px!important;font-size: 15px">
            <tr>
              <td style="text-align:left; width:30%!important;"><span class="date"></span></td>
              <td style="text-align:center; width:30%!important;"><span class="pageNumber"></span></td>
              <td style="text-align:right; width:30%!important;"><span class="totalPages"></span></td>
            </tr>
          </table>
        custom_footer: |-
          <style>#header, #footer { padding: 0 !important; }</style>
          <table style="width: 100%; padding: 0px 5px;margin: 0px!important;font-size: 15px">
            <tr>
              <td style="text-align:left; width:30%!important;"><span class="date"></span></td>
              <td style="text-align:center; width:30%!important;"><span class="pageNumber"></span></td>
              <td style="text-align:right; width:30%!important;"><span class="totalPages"></span></td>
            </tr>
          </table>
      properties:
        paper_size:
          description: |
            Specifies the paper size for the PDF. The available options are Letter, Legal, Tabloid, Ledger, A0, A1, A2, A3, A4, A5,A6 or custom. custom dimensions specified as "custom_width" and "custom_height".
          type: string
        custom_width:
          description: |
            Custom width for the custom paper size. Valid units are mm, px and cm. eg: 30mm
          type: string
        custom_height:
          description: |
            Custom height for the custom paper size. Valid units are mm, px and cm. eg: 30mm
          type: string
        orientation:
          description: |
            Specifies the orientation of the PDF. The available options are "1" for portrait and "2" for landscape.
          type: string
        header_font_size:
          description: |
            Specifies the font size for the header in the PDF.
          type: string
        margin_top:
          description: |
            Specify the top margin for the PDF in millimeters (mm).
          type: string
        margin_right:
          description: |
            Specify the right margin for the PDF in millimeters (mm).
          type: string
        margin_bottom:
          description: |
            Specify the bottom margin for the PDF in millimeters (mm).
          type: string
        margin_left:
          description: |
            Specify the left margin for the PDF in millimeters (mm).
          type: string
        print_background:
          description: |
            Specifies whether to print the background graphics and colors in the PDF. Set to "1" to include backgrounds or "0" to exclude them.
          type: string
        displayHeaderFooter:
          description: |
            Specifies whether to display the header and footer in the PDF. Set to true to include the header and footer or false to exclude them.
          type: boolean
        custom_header:
          description: |
            Specify custom HTML markup for the headerof the PDF. These properties should contain valid HTML markup, including any necessary CSS styles.
          type: string
        custom_footer:
          description: |
            Specify custom HTML markup for the footer of the PDF. These properties should contain valid HTML markup, including any necessary CSS styles.
          type: string
      type: object
    create_pdf_from_html_request:
      properties:
        body:
          description: |
            The HTML body content for the PDF. This property supports HTML markup and can include Jinja2 syntax (e.g {{name}}). The value of {{name}} will be replaced with the actual value provided in the data object.
          example: |
            "<h1> hello world {{name}} </h1>"
          type: string
        css:
          description: |
            The CSS styles to be applied to the PDF. This property should contain valid CSS markup and should also include the style tag.
          example: |
            "<style>.bg{backgound: red};</style>"
          type: string
        data:
          description: |
            The data object containing values for dynamic content in the HTML body. This object should include properties with corresponding values.
          example: |
            name: "This is a title"
          type: object
        settings:
          $ref: '#/components/schemas/PDFGenerationSettingsObject'
      type: object
    create_pdf_from_url_request:
      properties:
        url:
          description: |
            The URL
          example: |
            "https://en.wikipedia.org/wiki/Sceloporus_malachiticus"
          type: string
        settings:
          $ref: '#/components/schemas/PDFGenerationSettingsObject'
      type: object
    update_template_request:
      properties:
        template_id:
          description: |
            Your template id, it can be obtained in the web console(Manage Templates)
          example: 00377b2b1e0ee394
          type: string
        body:
          description: |
            The HTML body
          example: <h1>Title</h1>
          type: string
        css:
          description: |
            The css
          example: |
            '{body{ background: white;}'
          type: string
      required:
      - template_id
      type: object
    merge_pdfs_request:
      properties:
        urls:
          description: |
            URL array. We support normal http/https URLs and data URLs
            - Normal URLs: URLs start with http/https, e.g: "https://fileserver.com/a1.pdf")
            - Data URLs: URLs prefixed with the "data:" scheme, e.g "data:application/pdf;base64,JVBERi0xLjIg...[truncated]"
          example:
          - https://fileserver.com/a1.pdf
          - https://fileserver.com/b2.pdf
          - "data:application/pdf;base64,JVBERi0xLjIg...[truncated]"
          items:
            type: object
          type: array
        export_type:
          description: |
            - Either `file` or `json`(Default).
              - The option `json` returns a JSON object, and the output PDF is stored on a CDN.
              - The option `file` returns binary data of the generated PDF(Secure and completely private) and the response HTTP header Content-Disposition is set to attachment. It has a file size limit of 6MB.
          example: json
          type: string
        expiration:
          description: |
            - Expiration of the generated PDF in minutes(default to `0`, store permanently)
              - Use `0` to store on cdn permanently
              - Or use the range between `1` minute and `43200` minutes(30 days) to specify the expiration of the generated PDF
          example: 5
          type: integer
        cloud_storage:
          description: |
            - Upload the generated PDFs/images to our storage CDN, default to `1`. If you have configured `Post Action` to upload the PDFs/Images to your own S3, please set it to `0`.
          example: 1
          type: integer
      required:
      - urls
      type: object
    ResponseSuccessPDFFile_post_actions_inner:
      properties:
        action:
          type: string
        name:
          type: string
        bucket:
          type: string
        status:
          type: string
        file:
          type: string
      type: object
    ResponseSuccessListTemplates_templates_inner:
      properties:
        template_id:
          type: string
        name:
          type: string
        status:
          type: string
        format:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
        group_name:
          type: string
      type: object
  securitySchemes:
    ApiKeyAuth:
      description: |
        An API key is needed to be set in the Authorization header of every API call.
        For additional support you can contact us.

        - APITemplate.io expects the API key to be part of all API requests to the server in a header in this format:
          ```
          X-API-KEY: [API_KEY]
          ```

        - Optionally we also support Authorization header
          ```
          Authorization: Token [API_KEY]
          ```

        **Note: You must replace the API KEY(6fa6g2pdXGIyHRhVlGh7U56Ada1eF) with your API key in the request samples.**
      in: header
      name: X-API-KEY
      type: apiKey

